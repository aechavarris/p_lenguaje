/**
 * Especificacion JavaCC para la Practica 2 (Procesadores de Lenguajes)
 * Marcos Nuez - 761319@unizar.es
 * Alvaro Echavarri - 737400@unizar.es
 * v1.2 - 2021/03/16
 */
options
{
  static = true;
  ignore_case = true;
  
}

PARSER_BEGIN(minilengcompiler)

package analizador;
import java.io.*;

public class minilengcompiler {
  
  static boolean errorSintactico = false;
  static Tabla_simbolos tabla_simbolos = new Tabla_simbolos();
  static int nivel = 0;
  
	  public static void main(String args []) throws ParseException {
	    if (args.length != 0 ) {
			File tmp = new File(args[0]);
			String file = tmp.getAbsolutePath();
			try {
				minilengcompiler parser = new minilengcompiler(new FileInputStream(file));
			}  
			catch (FileNotFoundException e) {
				System.out.printf("No existe el fichero: "+ file + "\n"); 
				System.exit(1);
			}
      	}
      	else {
      	    System.out.printf("Leyendo de la entrada estandar..." + "\n");
			minilengcompiler parser = new minilengcompiler(System.in);
        }    	
   		try {  
		    minilengcompiler.programa();

		    if ( errorSintactico ) {
				System.out.println("Hay uno o más errores sintácticos");
				System.exit(1);
		    }
		     
		    System.out.println("Analizado correctamente");	
		}
		catch(TokenMgrError e) {  
		     // ERRORES LEXICOS
		     try {
				String simbolo = String.valueOf(minilengcompilerTokenManager.input_stream.readChar());
		        String fil = String.valueOf(minilengcompilerTokenManager.input_stream.getEndLine());
		        String col = String.valueOf(minilengcompilerTokenManager.input_stream.getEndColumn());
		     
		        System.err.println("ERROR LÉXICO (<" + fil + ", " + col + ">): símbolo no reconocido: <" + simbolo + ">");
		        return;
		     }  
		     catch (Exception ex) { }
		}   
 	 }
 	 
 	 private static void error_sintactico(ParseException e, String mensaje) {
    	// ERRORES SINTACTICOS
    	Token ultimoLeido = minilengcompiler.getNextToken();
    	int fil = ultimoLeido.beginLine;
    	int col = ultimoLeido.beginColumn;
    	String current = ultimoLeido.image;
    
    	System.out.println("ERROR SINTÁCTICO (<" + fil  + ", " + col + ">): Token obtenido -> " + current + " -> " + mensaje );
    	if ( !errorSintactico ) {
			errorSintactico = true;
   		}  
  }
}

PARSER_END(minilengcompiler)

< DEFAULT >SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "%" : COMLINE
| "%%" : COMBLOCK
}

< COMLINE >SKIP :
{
  "\n" : DEFAULT
}

< COMBLOCK >SKIP :
{
  "%%" : DEFAULT
}


< COMLINE >MORE :
{
  < ~[ ] >
}

< COMBLOCK >MORE :
{
  < ~[ ] >
}

TOKEN : /* CONTROLES DE FLUJO */
{
  < tPROGRAMA : "programa" >
| < tACCION : "accion" >
| < tENT : "ent" >
| < tSI_NO : "si_no" >
| < tPRINCIPIO : "principio" >  
| < tFIN : "fin" >
| < tMQ : "mq" >
| < tFMQ : "fmq" >
| < tSI : "si" >
| < tFSI : "fsi" >
}

TOKEN : /* FUNCIONES */
{
  < tMOD : "mod" >
| < tESCRIBIR : "escribir" >
| < tLEER : "leer" >  
| < tENTACAR : "entacar" >
| < tCARAENT : "caraent" >
}
  
TOKEN : /* OPERADORES */
{
  < tSUMA : "+" >
| < tRESTA : "-" >
| < tMULL : "*" >
| < tDIV : "/" >
| < tDIV1 : "div" >       
| < tMAYOR : ">" >
| < tMENOR : "<" >
| < tIGUAL : "=" >
| < tOAS : ":=" >
| < tMAI : ">=" >
| < tMEI : "<=" >
| < tNI : "<>" >
| < tAND : "and" >             
| < tOR : "or" >
| < tNOT : "not" >                                   
}

TOKEN : /* TIPOS DE DATOS */
{
  < tENTERO : "entero" >
| < tBOOLEANO : "booleano" >
| < tCARACTER : "caracter" >
| < tVAL : "val" >
| < tREF : "ref" >
| < tTRUE : "true" >
| < tFALSE : "false" >      
}

TOKEN : /* AGRUPACIONES */
{
  <  tLLAVE_IZQ : "{" >
| <  tLLAVE_DCHA : "}" >
| <  tPA : "(" >
| <  tPC : ")" >   
}

TOKEN : /* VALORES */
{
  < #DIGITO : ["0"-"9"] >
| < #LETRA : ["a"-"z","_","0"-"9"] >
| < #BOOLEAN : "true" | "false" >
| < #LETRAID_INICIAL : ["a"-"z","_"] >
| < #LETRAID_FINAL : ["a"-"z","0"-"9"] >
| < #CARACTER : "\""~["\""] "\"" >
| < #CADENA : "\""(~["\""])+ "\"" >
| < #CADENA_VACIA : "\"""\"" >

| < tVALOR_ENTERO : (< DIGITO >)+ >
| < tVALOR_CARACTER : ("-")?(< CARACTER >) >
| < tVALOR_CADENA : ("-")?(< CADENA >) >
| < tVALOR_CADENA_VACIA : ("-")?(< CADENA_VACIA >) >
| < tVALOR_BOOLEANO : ("-")?(< BOOLEAN >) >
| <  tIDENTIFICADOR : (< LETRAID_INICIAL >)(< LETRA >)*(< LETRAID_FINAL >) | (< LETRAID_INICIAL >) >
}

TOKEN : /* FINES DE SENTENCIA */
{
  <  tFIN_SENTENCIA : ";" >
| <  tCOMA : "," >
}


void programa():
{
}
{
  try { 
  	< tPROGRAMA > < tIDENTIFICADOR > < tFIN_SENTENCIA > (declaracion_variables()) (declaracion_acciones())
 	 (bloque_sentencias())*
  }catch(ParseException e) {
		error_sintactico(e,"Error en programa");
	}
}

void sentencia():
{
}
{
try { 
  	(leer()) < tFIN_SENTENCIA >
 |  (escribir()) < tFIN_SENTENCIA >
 |  < tIDENTIFICADOR > (asignacion_invocacion_accion()) < tFIN_SENTENCIA >
 |	(seleccion()) 
 |	(mientras_que())
 | 	(si())
 
}catch(ParseException e) {
	error_sintactico(e,"Error en sentencia");
}
}

void asignacion_invocacion_accion():
{
}
{
  try { 
  asignacion()|invocacion_accion()
}catch(ParseException e) {
	error_sintactico(e,"Error en asignacion");
}
}

void asignacion():
{
}
{
  try { 
  < tOAS > expresion()
}catch(ParseException e) {
	error_sintactico(e,"Error en asignacion");
}
}

void invocacion_accion():
{
}
{
  try {
    
  <tIDENTIFICADOR>(< tFIN_SENTENCIA >|argumentos()< tFIN_SENTENCIA >)
}catch(ParseException e) {
	error_sintactico(e,"Error en invocacion_accion");
}
}

void declaracion_variables():
{
}
{
  try { 
  	( declaracion() ";" )*
 }catch(ParseException e) {
	error_sintactico(e,"Error en declaracion_variables");
}
}

void declaracion():
{
}
{
  try { 
  	tipo_variables() identificadores()
 }catch(ParseException e) {
	error_sintactico(e,"Error en declaracion");
}
}

void tipo_variables():
{
}
{
  try { 
  	< tENTERO > | < tCARACTER > | < tBOOLEANO >
 }catch(ParseException e) {
	error_sintactico(e,"Error en tipo_variables");
}
}

void identificadores():
{
}
{
  try { 
  	< tIDENTIFICADOR > ( "," < tIDENTIFICADOR > )*
 }catch(ParseException e) {
	error_sintactico(e,"Error en identificadores");
}
}

void declaracion_acciones():
{
}
{
  try { 
  	( declaracion_accion() )*
 }catch(ParseException e) {
	error_sintactico(e,"Error en declaracion_acciones");
}
}

void declaracion_accion():
{
}
{
  try { 
  	cabecera_accion() declaracion_variables() declaracion_acciones() bloque_sentencias()
 }catch(ParseException e) {
	error_sintactico(e,"Error en declaracion_accion");
}
}

void cabecera_accion():
{
}
{
  try { 
  	< tACCION > < tIDENTIFICADOR > (parametros_formales())?< tFIN_SENTENCIA >
 }catch(ParseException e) {
	error_sintactico(e,"Error en cabecera_accion");
}
}

void parametros_formales():
{
}
{
  try { 
  < tPA >(parametros() (< tFIN_SENTENCIA > parametros())*)?< tPC >
}catch(ParseException e) {
	error_sintactico(e,"Error en parametros_formales");
}
}

void parametros():
{
}
{
  try { 
  	clase_parametros() tipo_variables() identificadores()
 }catch(ParseException e) {
	error_sintactico(e,"Error en parametros");
}
}

void clase_parametros():
{
}
{
  try { 
  	< tVAL > | < tREF >
 }catch(ParseException e) {
	error_sintactico(e,"Error en clase_parametros");
}
}

void bloque_sentencias():
{
}
{
  try { 
  	< tPRINCIPIO > lista_sentencias() < tFIN >
 }catch(ParseException e) {
	error_sintactico(e,"Error en bloque_sentencias");
}
}

void lista_sentencias():
{
}
{
  try { 
  	(sentencia())*
 }catch(ParseException e) {
	error_sintactico(e,"Error en lista_sentencias");
}
}

void leer():
{
}
{
  try { 
  	< tLEER > < tPA > identificadores() < tPC >
 }catch(ParseException e) {
	error_sintactico(e,"Error en leer");
}
}

void escribir():
{
}
{
  try { 
  	< tESCRIBIR > < tPA > lista_escribibles() < tPC >
 }catch(ParseException e) {
	error_sintactico(e,"Error en escribir");
}
}

void caraent():
{
}
{
  try { 
  < tCARAENT ><tPA >(expresion())<tPC >
}catch(ParseException e) {
	error_sintactico(e,"Error en caraent");
}
}

void entacar():
{
}
{
  try { 
  < tENTACAR ><tPA >(expresion())<tPC >
}catch(ParseException e) {
	error_sintactico(e,"Error en entacar");
}
}

void lista_escribibles():
{
}
{
  try { 
  	( expresion() ) ( < tCOMA > (expresion() ) )*
}catch(ParseException e) {
	error_sintactico(e,"Error en lista_escribibles");
}
}

void mientras_que():
{
}
{
  try { 
  	< tMQ > expresion()( ( < tAND > | < tOR > ) expresion())* lista_sentencias() < tFMQ >
 }catch(ParseException e) {
	error_sintactico(e,"Error en mientras_que");
}
}

void si():
{
}
{
  try { 
  	< tSI > expresion()( ( < tAND > | < tOR > ) expresion())* < tENT > lista_sentencias() (< tSI_NO > lista_sentencias())* < tFSI >
 }catch(ParseException e) {
	error_sintactico(e,"Error en si");
}
}

void argumentos():
{
}
{
  try { 
  	< tPA > ( lista_expresiones() )? < tPC >
 }catch(ParseException e) {
	error_sintactico(e,"Error en argumentos");
}
}

void lista_expresiones():
{
}
{
  try { 
  	expresion()(","expresion())*
 }catch(ParseException e) {
	error_sintactico(e,"Error en lista_expresiones");
}
}

void seleccion():
{
}
{
  try { 
  	< tPRINCIPIO > < tIDENTIFICADOR > < tLLAVE_IZQ > (sentencia())* < tLLAVE_DCHA >
 }catch(ParseException e) {
	error_sintactico(e,"Error en seleccion");
}
}

void expresion():
{
}
{
  try { 
   factor()( (operador()) factor() )*
 }catch(ParseException e) {
	error_sintactico(e,"Error en expresion");
}
}

void operador():
{
}
{
  try {
    operador_aditivo()|operador2()

	 
}catch(ParseException e) {
	error_sintactico(e,"Error en operador_relacional");
}
}

void operador2():
{
}
{
  try {
    operador_multiplicativo()|operador3()
	 
}catch(ParseException e) {
	error_sintactico(e,"Error en operador_relacional");
}
}

void operador3():
{
}
{
  try {
    operador_relacional()
	 
}catch(ParseException e) {
	error_sintactico(e,"Error en operador_relacional");
}
}

void operador_relacional():
{
}
{
  try { 
	 < tMENOR >
	| < tMAYOR >
	| < tMEI >
	| < tMAI >
	| < tIGUAL >
	| < tNI >
	| < tAND >
	| < tOR >
}catch(ParseException e) {
	error_sintactico(e,"Error en operador_relacional");
}
}

void operador_aditivo():
{
}
{
  try { 
  < tRESTA >
	| < tSUMA >
}catch(ParseException e) {
	error_sintactico(e,"Error en operador_adictivo");
}
}

void operador_multiplicativo():
{
} 
{
  try { 
  < tMULL >
	| < tDIV >
	| < tDIV1 >
	| < tMOD >
}catch(ParseException e) {
	error_sintactico(e,"Error en operador_multiplicativo");
}
}

void factor():
{
}
{
  try { 
  (< tRESTA >|< tNOT >)? factor2()
}catch(ParseException e) {
	error_sintactico(e,"Error en factor");
}
}

void factor2():
{
}
{
  try { 
   < tPA > expresion() < tPC >
| < tENTACAR > < tPA > expresion() < tPC >
| < tCARAENT > < tPA > expresion() < tPC >
| < tIDENTIFICADOR >
| < tENTERO >
| < tVALOR_CARACTER >
| < tVALOR_CADENA >
| < tVALOR_CADENA_VACIA >
| < tVALOR_ENTERO >
| < tTRUE >
| < tFALSE >
}catch(ParseException e) {
	error_sintactico(e,"Error en factor2");
}
}
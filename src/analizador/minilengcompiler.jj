/**
 * Marcos Nuez - 761319@unizar.es
 * Alvaro Echavarri - 737400@unizar.es
 * v2 - 2021/04/13
 */

options
{
  static = true;
  ignore_case = true;
  //debug_parser=true;
}

PARSER_BEGIN(minilengcompiler) 

package analizador;
import java.io.*;
import lib.errores.*;
import lib.codigo.*;
import lib.semantico.*; 
import java.util.ArrayList;
import lib.semantico.Simbolo.*;
import lib.semantico.Elemento.*;
 
public class minilengcompiler {
  
  static boolean errorSintactico = false;
  static boolean errorSemantico = false;
  static TablaSimbolos tabla_simbolos = new TablaSimbolos();
  static int nivel = 0;
  static int direccion=3;
  static int ejecucion_correcta=1;
  static int DIR_INICIAL=3;
  static Codigo codigo;
  static String fichero;
	 public static void main(String args []) throws ParseException {
	   tabla_simbolos.inicializar_tabla();
	    if (args.length != 0 ) {
			File tmp = new File(args[0]);
			String file = tmp.getAbsolutePath()+".ml";
			fichero=file;
			try {
				minilengcompiler parser = new minilengcompiler(new FileInputStream(file));
				codigo=new Codigo(file);
			}  
			catch (FileNotFoundException e) {
				System.out.printf("No existe el fichero: "+ file + "\n"); 
				System.exit(1);
			}
      	}
      	else {
      	    System.out.printf("Leyendo de la entrada estandar..." + "\n");
			minilengcompiler parser = new minilengcompiler(System.in);
        }    	
   		try {  
		    minilengcompiler.programa();

		    if ( errorSintactico ) {
				System.out.println("Hay uno o más errores sintácticos");
				System.exit(1);
		    }
		    
		    if ( errorSemantico ) {
				System.out.println("Hay uno o más errores semánticos");
				System.exit(1);
		    }
		     
		    System.out.println("Analizado correctamente");	
		}
		catch(TokenMgrError e) {  
		     // ERRORES LEXICOS
		     try {
				String simbolo = String.valueOf(minilengcompilerTokenManager.input_stream.readChar());
		        String fil = String.valueOf(minilengcompilerTokenManager.input_stream.getEndLine());
		        String col = String.valueOf(minilengcompilerTokenManager.input_stream.getEndColumn());
		     
		        System.err.println("ERROR LÉXICO (<" + fil + ", " + col + ">): símbolo no reconocido: <" + simbolo + ">");
		        ejecucion_correcta=0;
		        return;
		     }  
		     catch (Exception ex) { }
		}    
 	 }
 	 
 	 private static void error_sintactico(ParseException e, String mensaje) {
    	// ERRORES SINTACTICOS
    	Token ultimoLeido = minilengcompiler.getNextToken();
    	int fil = ultimoLeido.beginLine;
    	int col = ultimoLeido.beginColumn;
    	String current = ultimoLeido.image;
    
    	System.out.println("ERROR SINTÁCTICO (<" + fil  + ", " + col + ">): Token obtenido -> " + current + " -> " + mensaje );
    	if ( !errorSintactico ) {
			errorSintactico = true;
   		}
   		ejecucion_correcta=0;
  	 }

  	private static void error_semantico(String name, int f, int col, Exception except) {
  		// ERRORES SEMÁNTICOS
  		if ( !errorSemantico ) {
			errorSemantico = true;
   		}
   		
  		if (except instanceof SimboloNoEncontradoException) {
			System.out.println("ERROR SEMÁNTICO: <No se ha encontrado el símbolo llamado: " + name + "> en (<" + f  + ", " + col + ">)");
	    }
		else if (except instanceof SimboloYaDeclaradoException) {
			System.out.println("ERROR SEMÁNTICO: <Ya ha sido declarado el símbolo llamado: " + name + "> en (<" + f  + ", " + col + ">)");
		}else if (except instanceof OutOfBoundsIntExcepction) {
			System.out.println("ERROR SEMÁNTICO: <Entero fuera de rango dentro de: " + name + "> en (<" + f  + ", " + col + ">)");
		}else if (except instanceof WrongExpresionException) {
			System.out.println("ERROR SEMÁNTICO: <Expresion no valida cerca de: " + name + "> en (<" + f  + ", " + col + ">)");
		}else if (except instanceof DivZeroException) {
			System.out.println("ERROR SEMÁNTICO: <Division por 0 encontrada dentro de: " + name + "> en (<" + f  + ", " + col + ">)");
		}else if (except instanceof WrongTypeException) {
			System.out.println("ERROR SEMÁNTICO: <Tipo incorrecto cerca de: " + name + "> en (<" + f  + ", " + col + ">)");
		}else if (except instanceof WrongParameterException) {
			System.out.println("ERROR SEMÁNTICO: <Parametro incorrecto cerca de: " + name + "> en (<" + f  + ", " + col + ">)");
		}else if (except instanceof WrongActionException) {
			System.out.println("ERROR SEMÁNTICO: <Accion incorrecta encontrada en: " + name + "> en (<" + f  + ", " + col + ">)");
		}else if (except instanceof SimboloNoAsignableException) {
			System.out.println("ERROR SEMÁNTICO: <Simbolo no asignable encontrado en: " + name + "> en (<" + f  + ", " + col + ">)");
		}else if (except instanceof VectorIndexException) {
			System.out.println("ERROR SEMÁNTICO: <Acceso a elemento de vector incorrecto: " + name + "> en (<" + f  + ", " + col + ">)");
		}
		
		
		ejecucion_correcta=0;
 	}  
}

PARSER_END(minilengcompiler)

< DEFAULT >SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "%" : COMLINE
| "%%" : COMBLOCK
}

< COMLINE >SKIP :
{
  "\n" : DEFAULT
}

< COMBLOCK >SKIP :
{
  "%%" : DEFAULT
}


< COMLINE >MORE :
{
  < ~[ ] >
}

< COMBLOCK >MORE :
{
  < ~[ ] >
}

TOKEN : /* CONTROLES DE FLUJO */
{
  < tPROGRAMA : "programa" >
| < tACCION : "accion" >
| < tENT : "ent" >
| < tSI_NO : "si_no" >
| < tPRINCIPIO : "principio" >  
| < tFIN : "fin" >
| < tMQ : "mq" >
| < tFMQ : "fmq" >
| < tSI : "si" >
| < tFSI : "fsi" >
}

TOKEN : /* FUNCIONES */
{
  < tMOD : "mod" >
| < tESCRIBIR : "escribir" >
| < tLEER : "leer" >  
| < tENTACAR : "entacar" >
| < tCARAENT : "caraent" >
}
  
TOKEN : /* OPERADORES */
{
  < tSUMA : "+" >
| < tRESTA : "-" >
| < tMULL : "*" >
| < tDIV : "/" >
| < tDIV1 : "div" >       
| < tMAYOR : ">" >
| < tMENOR : "<" >
| < tIGUAL : "=" >
| < tOAS : ":=" >
| < tMAI : ">=" >
| < tMEI : "<=" >
| < tNI : "<>" >
| < tAND : "and" >             
| < tOR : "or" >
| < tNOT : "not" >                                   
}

TOKEN : /* TIPOS DE DATOS */
{
  < tENTERO : "entero" >
| < tBOOLEANO : "booleano" >
| < tCARACTER : "caracter" >
| < tVAL : "val" >
| < tREF : "ref" >
| < tTRUE : "true" >
| < tFALSE : "false" >      
}

TOKEN : /* AGRUPACIONES */
{
  <  tLLAVE_IZQ : "{" >
| <  tLLAVE_DCHA : "}" >
| <  tPA : "(" >
| <  tPC : ")" >
| <  tCORCH_I : "[" >
| <  tCORCH_D : "]" > 
}

TOKEN : /* VALORES */
{
  < #DIGITO : ["0"-"9"] >
| < #LETRA : ["a"-"z","_","0"-"9"] >
| < #BOOLEAN : "true" | "false" >
| < #LETRAID_INICIAL : ["a"-"z","_"] >
| < #LETRAID_FINAL : ["a"-"z","0"-"9"] >
| < #CARACTER : "\""~["\""] "\"" >
| < #CADENA : "\""(~["\""])+ "\"" >
| < #CADENA_VACIA : "\"""\"" >

| < tVALOR_ENTERO : (< DIGITO >)+ >
| < tVALOR_CARACTER : ("-")?(< CARACTER >) > 
| < tVALOR_CADENA : ("-")?(< CADENA >) >
| < tVALOR_CADENA_VACIA : ("-")?(< CADENA_VACIA >) >
| < tVALOR_BOOLEANO : ("-")?(< BOOLEAN >) >
| <  tIDENTIFICADOR : (< LETRAID_INICIAL >)(< LETRA >)*(< LETRAID_FINAL >) | (< LETRAID_INICIAL >) >
}

TOKEN : /* FINES DE SENTENCIA */
{
  <  tFIN_SENTENCIA : ";" > 
| <  tCOMA : "," >
}


void programa():
{
  Token p=null;
  String etiqueta="";
  ArrayList<String> declaraciones=new ArrayList<String>();
  ArrayList<String> variables=new ArrayList<String>();
  ArrayList<String> bloque=new ArrayList<String>();
}
{
  try { 
  	< tPROGRAMA > p=< tIDENTIFICADOR >
  		{
  		  if(p!=null){
  		    etiqueta=codigo.getEtiqueta("PROGRAMA");
			tabla_simbolos.introducir_programa(p.image,0);
			tabla_simbolos.imprimirTabla(); 
  	 	  } 
  	  	}
  	   < tFIN_SENTENCIA > (variables=declaracion_variables()) (declaraciones=declaracion_acciones())

 	 (bloque=bloque_sentencias())*
 	 {
 	   codigo.escribir("; Programa "+p.image+".\n");
	   codigo.escribir("\t"+"ENP  "+etiqueta+"\n");
	   codigo.escribir("\t"+"JMP  "+etiqueta+"\n");
	   codigo.escribir("error_inicializada:\n");
	   codigo.escribir(";Escribir error en runtime.\n");
	   String tmp="Error en runtime: variable no inicializada.\n";
	   for(int n=0;n<tmp.length();n++) {
			codigo.escribir("\t"+"STC  "+(int)tmp.charAt(n)+"\n");
			codigo.escribir("\t"+"WRT  0"+"\n");
		}
	   codigo.escribir("\t"+"JMP  FIN_PROGRAMA"+"\n");
	   for(int n=0; n<variables.size();n++) {
			codigo.escribir(variables.get(n));
	   }
	   for(int n=0; n<declaraciones.size();n++) {
			codigo.escribir(declaraciones.get(n));
	   }
			
  	   codigo.escribir("; Comienzo del programa "+p.image+".\n");
	   codigo.escribir(etiqueta+":\n");
	   for(int n=0; n<bloque.size();n++) {
			codigo.escribir(bloque.get(n));
	   }
 	   if(ejecucion_correcta==1) {
			tabla_simbolos.eliminar_variables(nivel);
			tabla_simbolos.eliminar_acciones(nivel);
			tabla_simbolos.eliminar_programa();
			tabla_simbolos.imprimirTabla();
			try {
			    codigo.escribir("FIN_PROGRAMA:\n");
				codigo.escribir("; Fin de programa "+p.image+".\n");
			 	codigo.escribir("\t"+"LVP"+"\n");
				codigo.finCodigo(ejecucion_correcta);
			}catch(IOException e) {
			  System.out.println("Ha ocurrido un error al crear el fichero .code");
			   }
 	   }
 	 }
  }catch(ParseException e) {
		error_sintactico(e,"Sintaxis de programa incorrecta");
	}
}

ArrayList< String> sentencia():
{
  Token t=null;
  ArrayList<String> sentencia=new ArrayList<String>();
  ArrayList<String> s=new ArrayList<String>();
  boolean hayExpresion=false;
  Elemento E=new Elemento();
}
{
try { 
  	(s=leer()) < tFIN_SENTENCIA >
 |  (s=escribir()) < tFIN_SENTENCIA >
 |  t=< tIDENTIFICADOR > (s=asignacion_invocacion_accion(t)) < tFIN_SENTENCIA >
 |	(s=seleccion()) 
 |	(s=mientras_que())
 | 	(s=si())
 
}catch(ParseException e) {
	error_sintactico(e,"Sintaxis de sentencia incorrecta");
}
{
  sentencia.addAll(s);
  return sentencia;}
}

ArrayList<String> asignacion_invocacion_accion(Token t):
{
  ArrayList<String> asig=new ArrayList<String>();
}
{
  try { 
  asig=asignacion(t)|asig=invocacion_accion(t)
}catch(ParseException e) {
	error_sintactico(e,"No se encuentra asignacion o invocacion a accion");
}
{
  return asig;}
}

ArrayList< String> asignacion(Token t):
{
  Simbolo s=null;
  Elemento E=new Elemento();
  Elemento el=new Elemento();
  Elemento el1=new Elemento();
  ArrayList< String> asig=new ArrayList< String>();
  boolean hayExpresion=false;
}
{
  try {
    { 
    	try { 
    		s=tabla_simbolos.buscar_simbolo(t.image);
    		el.setTipo(s.getVariable());
    		el.setVector(s.ES_VECTOR());
    		if(el.isVector()) { 
    			el.setLongitud(s.getLongitud());
    		}
    		if(s.ES_ACCION() ||s.ES_PROGRAMA() || s.ES_VALOR()) {
    		  
				error_semantico(t.image, t.beginLine, t.beginColumn, new SimboloNoAsignableException());
    		}
    		}catch(SimboloNoEncontradoException e) {
      			error_semantico(t.image, t.beginLine, t.beginColumn, e);
      			try {
					s=tabla_simbolos.introducir_variable(t.image, Tipo_variable.DESCONOCIDO,nivel, direccion);
					direccion++;
					el.setTipo(Tipo_variable.DESCONOCIDO);
					if(s.ES_PARAMETRO()) {
						el.setPara(s.getParametro());
	     			}
				}catch(SimboloYaDeclaradoException ex) {}
    		}
    }  
(< tCORCH_I > {hayExpresion=true; }E=expresion()< tCORCH_D >)?< tOAS > el1=expresion()  
   {
     asig.add("; Direccion de la variable "+t.image+".\n");
     asig.add("\t"+"SRF  "+(nivel-s.getNivel())+"  "+s.getDir()+"\n");
     if(hayExpresion) {
        asig.addAll(E.getBuff());
		asig.add("\t"+"PLUS"+"\n");
     }
	if(el1.getTipo()!=Tipo_variable.DESCONOCIDO && el.getTipo()!=Tipo_variable.DESCONOCIDO) {
	  	
		if(el1.getTipo()!= el.getTipo() || (el.isVector() && (!el1.isVector()&&!hayExpresion)) || (el1.isVector() && (!el.isVector()&&!hayExpresion))) {
			
			error_semantico(t.image, t.beginLine, t.beginColumn, new SimboloNoAsignableException());
		}else {
		  if(!(el.isVector() && el.getLongitud()!=el1.getLongitud()&&!hayExpresion)) {
		    
		  	asig.addAll(el1.getBuff());
		  }else {
		    System.out.println("DEBUG");
			error_semantico(t.image, t.beginLine, t.beginColumn, new SimboloNoAsignableException());
		  }		
		}
	}else {
	  	
		error_semantico(t.image, t.beginLine, t.beginColumn, new SimboloNoAsignableException());
	}
	}
}catch(ParseException e) {
	error_sintactico(e,"Sintaxis de asignacion incorrecta");
}

{asig.add("; Asignacion.\n");
  asig.add("\t"+"ASG"+"\n");
  return asig;
}
}
ArrayList< String> invocacion_accion(Token t):
{
  Simbolo accion=new Simbolo();
  ArrayList< String> invocacion=new ArrayList< String>();
  ArrayList< String> parametros=new ArrayList< String>();
  ArrayList<Simbolo> paraList=null;
  boolean hayLista=false;
}
{
  {
    invocacion.add("; Invocacion a "+t.image+".\n");
    try { 
    	accion=tabla_simbolos.buscar_simbolo(t.image);
    	if(accion.getVariable()!=Tipo_variable.DESCONOCIDO && !accion.ES_ACCION()) {
			error_semantico(t.image, t.beginLine, t.beginColumn, new WrongActionException());
    	}
    }catch(SimboloNoEncontradoException e) {
      error_semantico(t.image, t.beginLine, t.beginColumn, e);
    }
  }
  try {
    (parametros=argumentos(accion) {hayLista=true; })?
    {{invocacion.addAll(parametros);
  	  if(accion!=null && accion.ES_ACCION() && accion.getVariable()!=Tipo_variable.DESCONOCIDO){
      		paraList=accion.getListaParametros();
      
  		}
  		if(paraList.size() >0 && !hayLista) {
			error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongActionException());
  		}
  	} }
}catch(ParseException e) {
	error_sintactico(e,"Sintaxis de invocacion a accion incorrecta");
}
{ 
  
  for(int n=0;n<codigo.getEtiquetas().size();n++) {
    
	if(codigo.getEtiquetas().get(n).equals(t.image)) {
		invocacion.add("\t"+"OSF  "+Integer.toString(direccion-1)+"  "+(accion.getNivel()-nivel)+" "+"L"+n+"\n");
	}
  } 
  
  return invocacion;}
}

ArrayList< String> declaracion_variables():
{
  ArrayList< String> variables=new ArrayList< String>();
  ArrayList< String> v=new ArrayList< String>();
}
{
  try { 
  	( v=declaracion() ";"
  	{
  	  variables.addAll(v);
  	}
  	)*
 }catch(ParseException e) {
	error_sintactico(e,"Declaracion de variables incorrecta");
}
{return variables;}
}

ArrayList < String> declaracion():
{
  Tipo_variable tipo = null;
  ArrayList<Token > listaID = null;
  ArrayList< String> declaracion=new ArrayList< String>();
  Token t=null;
  boolean vector=false;
  int v=0;
  Simbolo s=new Simbolo();
  String es="";
}
{
  try { 
  	tipo=tipo_variables() listaID=identificadores()
  	{
  	  	int corcheteA=0;
  	  	int corcheteB=0;
  	  	System.out.println(listaID);
		for(int i=0;i<listaID.size();i++) {
		  try {
		    for(int j=0;j<listaID.get(i).image.length();j++) {
			if(listaID.get(i).image.charAt(j)=='[') {
				vector=true;
				corcheteA=j;
			}
			if(listaID.get(i).image.charAt(j)==']') {
				corcheteB=j;
			}
  	      }
  	      if(vector) {
  	        
			es=listaID.get(i).image.substring(corcheteA+1,corcheteB);
			listaID.get(i).image=listaID.get(i).image.substring(0,corcheteA);
			v=Integer.parseInt(es);
			
			s=tabla_simbolos.introducir_variable_vector(listaID.get(i).image,tipo,v,nivel,direccion);
			for(int n=0;n<s.getLongitud();n++) {
				declaracion.add("; Reservamos direccion.\n");
				declaracion.add("; Inicializamos con valor centinela.\n");
	 			declaracion.add("\t"+"SRF  "+s.getNivel()+"  "+(s.getDir()+n)+"\n");
	 			declaracion.add("\t"+"STC  "+"32768"+"\n");
	 			declaracion.add("\t"+"ASG \n");
			}
		  	direccion = direccion+v;
		  	tabla_simbolos.imprimirTabla();
  	      }else { 
			s=tabla_simbolos.introducir_variable(listaID.get(i).image,tipo,nivel,direccion);
			declaracion.add("; Reservamos direccion.\n");
			declaracion.add("; Inicializamos con valor centinela.\n");
	 		declaracion.add("\t"+"SRF  "+s.getNivel()+"  "+s.getDir()+"\n");
	 		declaracion.add("\t"+"STC  "+"32768"+"\n");
	 		declaracion.add("\t"+"ASG \n");
			direccion=direccion+1;
			tabla_simbolos.imprimirTabla();
		  }
		  } catch(SimboloYaDeclaradoException e) {
		      t = listaID.get(i);
			  error_semantico(t.image, t.beginLine, t.beginColumn, e);
		    }	
  	  	}  
  	}
 }catch(ParseException e) {
	error_sintactico(e,"Sintaxis incorrecta");
}
{return declaracion;}
}

Tipo_variable tipo_variables():
{
  Tipo_variable tipo=null;
}
{
  try { 
  	< tENTERO > {tipo=Tipo_variable.ENTERO; }
  	| < tCARACTER > {tipo=Tipo_variable.CHAR; }
  	| < tBOOLEANO > {tipo=Tipo_variable.BOOLEANO; }
 }catch(ParseException e) {
	error_sintactico(e,"No se ha encontrado tipo de variable");
}
{return tipo;}
}

ArrayList<Token> identificadores():
{
  Token t=null;
  Token r=null;
  Elemento E=new Elemento();
  ArrayList<Token> listaID = new ArrayList<Token>();
  boolean hayExpresion=false;
}
{
  try { 
  	t=< tIDENTIFICADOR >( {hayExpresion=true; }< tCORCH_I >E=expresion()< tCORCH_D >)?
  		{
  		  if(t!=null){
  		    
  		    if(hayExpresion) {
  		      
  		      if(E.getEntero()!=null) {
  		      if(E.getEntero()< 0) {
				error_semantico(t.image, t.beginLine, t.beginColumn, new VectorIndexException());
				}else {
					t.image=t.image+"["+Integer.toString(E.getEntero())+"]";
				}
  		      }else if(E.getTipo()!=Tipo_variable.ENTERO) {
				error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
  		      }
			  hayExpresion=false;
  		    }
			listaID.add(t);
			E=null;
  	 	  }
  	  	} ( "," t=< tIDENTIFICADOR >({hayExpresion=true; }< tCORCH_I >E=expresion()< tCORCH_D >)?
  		{
  		  if(t!=null){
  		    
  		    if(hayExpresion) {
  		      
  		      if(E.getEntero()!=null) {
  		      if(E.getEntero()< 0) {
				error_semantico(t.image, t.beginLine, t.beginColumn, new VectorIndexException());
				}else {
					t.image=t.image+"["+Integer.toString(E.getEntero())+"]";
				}
  		      }else if(E.getTipo()!=Tipo_variable.ENTERO) {
				error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
  		      }
			  hayExpresion=false;
  		    }
			listaID.add(t);
			E=null;
  	 	  }
  	  	} )*
 }catch(ParseException e) {
	error_sintactico(e,"Sintaxis en definicion de identificadores incorrecta");
}
{return listaID;}
}

ArrayList<String> declaracion_acciones():
{
  ArrayList<String> declaraciones=new ArrayList<String>();
  ArrayList<String> declaracion=new ArrayList< String>();
}
{
  try { 
  	( declaracion=declaracion_accion()
  	{
  	    declaraciones.addAll(declaracion);
  	}
  	)*
 }catch(ParseException e) {
	error_sintactico(e,"Declaracion de acciones incorrecta");
}
{return declaraciones;}
}

ArrayList<String> declaracion_accion():
{
  int direccion_anterior=direccion;
  Token t=null;
  ArrayList<String> declaracion=new ArrayList<String>();
  ArrayList<String> declaracion2=new ArrayList<String>();
  ArrayList<String> variables=new ArrayList<String>();
  ArrayList< String> bloque=new ArrayList< String>();
}
{
  try {
     
  	t=cabecera_accion() variables=declaracion_variables()
  	{
  	  declaracion.add("; Accion "+t.image+".\n");
	  declaracion.add(codigo.getEtiqueta(t.image)+":\n");
	  declaracion.addAll(variables);
	}
	declaracion2=declaracion_acciones()
  	{
  	  	declaracion.addAll(declaracion2);
		declaracion.add("; Comienzo de la accion "+t.image+".\n");
  	}
  	bloque=bloque_sentencias()
  	{
  	  declaracion.addAll(bloque);
  	  declaracion.add("; Fin de la accion / funcion "+t.image+".\n");
	  declaracion.add("\t"+"CSF"+"\n");
  	  tabla_simbolos.eliminar_variables(nivel);
  	  tabla_simbolos.eliminar_parametros(nivel);
  	  direccion=direccion_anterior;
  	  tabla_simbolos.imprimirTabla();
  	  nivel=nivel-1;}
 }catch(ParseException e) {
	error_sintactico(e,"Estructura de accion incorrecta");
}
{return declaracion;}
}

Token cabecera_accion():
{
  Token t=null;
  Simbolo s=null;
  boolean encontrado=false;
  ArrayList<Simbolo > parametros=new ArrayList<Simbolo>();
}
{
  try { 
  	< tACCION > t=< tIDENTIFICADOR > {  
  		if(t != null){
  		  try {
			s=tabla_simbolos.introducir_accion(t.image,nivel,direccion);
			if(s!=null) {
				encontrado=true;
			}
			direccion = direccion+1;
			tabla_simbolos.imprimirTabla();
  		  } catch(SimboloYaDeclaradoException e) {
			  error_semantico(t.image, t.beginLine, t.beginColumn, e);
  		    }
  	 	}
  	    direccion=DIR_INICIAL;
  	 	nivel=nivel+1;
  	}(parametros=parametros_formales())?< tFIN_SENTENCIA >
  	
 }catch(ParseException e) {
	error_sintactico(e,"Sintaxis en definicion de accion incorrecta");
}
{
  if(encontrado) {
    
	s.setListaParametros(parametros);
  }
}
{return t;}
}

ArrayList<Simbolo> parametros_formales():
{
  ArrayList<Simbolo> parametros=new ArrayList<Simbolo>();
  ArrayList<Simbolo> parametros1=new ArrayList<Simbolo>();
  ArrayList<Simbolo> parametros2=new ArrayList<Simbolo>();
}
{
  try { 
  < tPA >(parametros1=parametros() {
	for(Simbolo s:parametros1) {
		parametros.add(s);
	}
  } (< tFIN_SENTENCIA > parametros2=parametros(){
	for(Simbolo s:parametros2) {
		parametros.add(s);
	}	
  })*)?< tPC >
}catch(ParseException e) {
	error_sintactico(e,"Estructura de parametros de accion incorrecta");
}
{return parametros;}
}

ArrayList<Simbolo > parametros():
{
  ArrayList<Token > tokens=null;
  Tipo_variable tipo=null;
  Clase_parametro clase=null;
  Simbolo s=null;
  Token t=null;
  boolean vector=false;
  int v=0;
  ArrayList<Simbolo> parametros=new ArrayList<Simbolo>();
}
{
  try { 
  	clase=clase_parametros() tipo=tipo_variables() tokens=identificadores()
  	{
  	  int corcheteA=0;
  	  int corcheteB=0;
  	  for(int i = 0; i < tokens.size(); i++) {
  	    try {
  	      
  	      for(int j=0;j<tokens.get(i).image.length();j++) {
			if(tokens.get(i).image.charAt(j)=='[') {
				vector=true;
				corcheteA=j;
			}
			if(tokens.get(i).image.charAt(j)==']') {
				corcheteB=j;
			}
  	      }
  	      if(vector) {
			String e=tokens.get(i).image.substring(corcheteA+1,corcheteB);
			tokens.get(i).image=tokens.get(i).image.substring(0,corcheteA);
			v=Integer.parseInt(e);
			s=tabla_simbolos.introducir_parametro_vector(tokens.get(i).image,tipo,clase,v,nivel,direccion);
			parametros.add(s);
		  	direccion = direccion+v;
		  	tabla_simbolos.imprimirTabla();
  	      }else { 
		  	s=tabla_simbolos.introducir_parametro(tokens.get(i).image,tipo,clase,nivel,direccion);
		  	parametros.add(s);
		  	direccion = direccion+1;
		  	tabla_simbolos.imprimirTabla();
		  }
		} catch(SimboloYaDeclaradoException e) {
		  	boolean end=false;
		  	Integer n=1;
		  	t = tokens.get(i);
		  	while(!end) {
		   	 try {
		   	   		if(vector) {
						s=tabla_simbolos.introducir_parametro_vector(t.image+"_"+Integer.toString(n),tipo,clase,v,nivel,direccion);
						end=true;
		  				parametros.add(s);
		  				direccion = direccion+v;
		  				tabla_simbolos.imprimirTabla();
		   	   		}else { 
						s=tabla_simbolos.introducir_parametro(t.image+"_"+Integer.toString(n),tipo,clase,nivel,direccion);
						end=true;
		  				parametros.add(s);
		  				direccion = direccion+1;
		  				tabla_simbolos.imprimirTabla();
		  			}
				} catch(SimboloYaDeclaradoException es) {n=n+1;}
		  	}
		  	error_semantico(t.image, t.beginLine, t.beginColumn, e);
		  }
  	  }
  	  
  	}
 }catch(ParseException e) {
	error_sintactico(e,"Sintaxis de parametros incorrecta");
}
{return parametros;}
}

Clase_parametro clase_parametros():
{
  Clase_parametro clase=null;
}
{
  try { 
  	< tVAL >{clase=Clase_parametro.VAL; }
  	| < tREF >{clase=Clase_parametro.REF; }
 }catch(ParseException e) {
	error_sintactico(e,"Tipo de parametro no encontrado");
}
{return clase;}
}

ArrayList<String> bloque_sentencias():
{
 ArrayList<String> bloque =new ArrayList<String>();
}
{
  try { 
  	< tPRINCIPIO >bloque=lista_sentencias() < tFIN >
 }catch(ParseException e) {
	error_sintactico(e,"Sintaxis de bloque de sentencias incorrecta");
}
{return bloque;}
}

ArrayList<String> lista_sentencias():
{
  ArrayList<String> sentencias =new ArrayList<String>();
  ArrayList<String> s =new ArrayList<String>();
}
{
  try {
  	(s=sentencia()
  	{
  		sentencias.addAll(s);
  	}
  	)*
 }catch(ParseException e) {
	error_sintactico(e,"Estructura de sentencias incorrecta");
}
{return sentencias;}
}

ArrayList< String> leer():
{
  ArrayList<Token> iden=new ArrayList<Token>();
  ArrayList< String> l=new ArrayList< String>();
  Token t=null;
  Token t1=null;
  Simbolo s=null;
  boolean vector=false;
  int v=0;
}
{
  try { 
  	t1=< tLEER > < tPA > iden=identificadores() < tPC >
  	{
  	  	int corcheteA=0;
  	  	int corcheteB=0;
		for(int n=0;n<iden.size();n++) {
		  t=iden.get(n);
		  try {
		    for(int j=0;j<iden.get(n).image.length();j++) {
			if(iden.get(n).image.charAt(j)=='[') {
				vector=true;
				corcheteA=j;
			}
			if(iden.get(n).image.charAt(j)==']') {
				corcheteB=j;
			}
  	      }
  	      if(vector) {
			String e=iden.get(n).image.substring(corcheteA+1,corcheteB);
			iden.get(n).image=iden.get(n).image.substring(0,corcheteA);
			v=Integer.parseInt(e);
			s=tabla_simbolos.buscar_simbolo(t.image);
			if(s.getLongitud()< v+1 || v<0) {
					error_semantico(t.image, t.beginLine, t.beginColumn, new VectorIndexException());
			}else { 
				l.add("; Leer.\n");
				l.add("\t"+"SRF  "+(nivel-s.getNivel())+"  "+(s.getDir()+v+1)+"\n");
			}
			if(s.ES_VARIABLE() || (s.ES_PARAMETRO() && s.ES_REFERENCIA())) {
				if(s.getVariable()==Tipo_variable.BOOLEANO || s.getParametro()==Clase_parametro.VAL) {
				  	error_semantico(t1.image, t1.beginLine, t1.beginColumn,new WrongTypeException());
				}
				if(s.getVariable()==Tipo_variable.ENTERO || s.getVariable()==Tipo_variable.BOOLEANO) {
					l.add("\t"+"RD  1"+"\n");
	  	 		}if(s.getVariable()==Tipo_variable.CADENA || s.getVariable()==Tipo_variable.CHAR) {
					l.add("\t"+"RD  0"+"\n");
	  	 		}
			}
  	      }else {
			s=tabla_simbolos.buscar_simbolo(t.image);
			
			l.add("; Leer.\n");
			l.add("\t"+"SRF  "+(nivel-s.getNivel())+"  "+s.getDir()+"\n");
			if(s.ES_VARIABLE() || (s.ES_PARAMETRO() && s.ES_REFERENCIA())) {
				if(s.getVariable()==Tipo_variable.BOOLEANO || s.getParametro()==Clase_parametro.VAL) {
				  	error_semantico(t1.image, t1.beginLine, t1.beginColumn,new WrongTypeException());
				}
				if(s.getVariable()==Tipo_variable.ENTERO || s.getVariable()==Tipo_variable.BOOLEANO) {
					l.add("\t"+"RD  1"+"\n");
	  	 		}if(s.getVariable()==Tipo_variable.CADENA || s.getVariable()==Tipo_variable.CHAR) {
					l.add("\t"+"RD  0"+"\n");
	  	 		}
			}
		  }
		  }catch(SimboloNoEncontradoException e) {
		    error_semantico(t.image, t.beginLine, t.beginColumn, e);
		    try {
		      if(vector) {
		        s=tabla_simbolos.introducir_variable_vector(t.image,Tipo_variable.DESCONOCIDO,v,nivel,direccion);
		    	direccion=direccion +v;
		      }else { 
		    	s=tabla_simbolos.introducir_variable(t.image,Tipo_variable.DESCONOCIDO,nivel,direccion);
		    	direccion=direccion +1;
		  	 }
		   }catch(SimboloYaDeclaradoException es) { }
		    
		   }
		}
  	}
 }catch(ParseException e) {
	error_sintactico(e,"Sintaxis de leer incorrecta");
}
{return l;}
}

ArrayList< String> escribir():
{
  ArrayList< String> lista=new ArrayList< String>();
  ArrayList< String> l=new ArrayList< String>();
}
{
  try { 
  	< tESCRIBIR > < tPA > l=lista_escribibles() < tPC >
  	{
		  lista.addAll(l);
  	}
 }catch(ParseException e) {
	error_sintactico(e,"Sintaxis de escribir incorrecta");
}
{return lista;}
}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////RECORDATORIO////////////////////////////////////
////////////////////////////AÑADIR !NULL PARA ELEMENTO//////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
void caraent():
{
  Token t=null;
  Elemento el=new Elemento();
}
{
  try { 
  t=< tCARAENT ><tPA >(el=expresion(){
	  	Integer en=null;
		if(el.getTipo()==Tipo_variable.CHAR ) {
		  if(el.getCaracter()!=null) {
			en=(int)el.getCaracter().charValue();
		}
		}else {
		  error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
		} 
		el.setTipo(Tipo_variable.ENTERO);
		el.setEntero(en);

	})<tPC >
}catch(ParseException e) {
	error_sintactico(e,"Sintaxis de caraent incorrecta");
}
}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////RECORDATORIO////////////////////////////////////
////////////////////////////AÑADIR !NULL PARA ELEMENTO//////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
void entacar():
{
  Elemento el=new Elemento();
  Token t=null;
}
{
  try { 
  t=< tENTACAR ><tPA >(el=expresion(){ 
	  	Character c=null;
		if(el.getTipo()==Tipo_variable.ENTERO) { 
		  if(el.getEntero()!=null) {
			if(el.getEntero() <0 || el.getEntero() >255 ) {
			  error_semantico(t.image, t.beginLine, t.beginColumn, new OutOfBoundsIntExcepction());
			}else {
			  c=(char)el.getEntero().intValue();
			}
			}
		}else {
		  error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
		} 
		el.setTipo(Tipo_variable.CHAR);
		el.setCaracter(c);

	})<tPC >
}catch(ParseException e) {
	error_sintactico(e,"Sintaxis de entacar incorrecta");
}
}

ArrayList< String> lista_escribibles():
{
  Token t=null;
  ArrayList< String> lista=new ArrayList< String>();
  Elemento el=new Elemento();
  Elemento el1=new Elemento();
  Elemento el2=new Elemento();
}
{
  try { 
  	( el1=expresion() ) 
  	{
  	  	lista.add("; Escribir.\n");
  	  	
		if(el1.getTipo()==Tipo_variable.CHAR) {
		  if(el1.getCaracter()!=null) { 
			  if((int)el1.getCaracter()>=32 && (int)el1.getCaracter() <=254 && el1.getPara()==Clase_parametro.VAL) { 
			  	lista.add("; caracter '"+el1.getCaracter()+"'.\n");
			  }
		  }
		  	
	  	 	if(el1.getTipo()==Tipo_variable.ENTERO || el1.getTipo()==Tipo_variable.BOOLEANO) {
	  	 	  if(el1.isVector()) {
	  	 	    for(int n=0;n<el1.getLongitud();n++) {
	  	 	        lista.add(el1.getBuff().get(n*3));
				    lista.add(el1.getBuff().get(n*3+1));
				    lista.add(el1.getBuff().get(n*3+2));  
					lista.add("\t"+"WRT  1"+"\n");
				  }
	  	 	  }else {
	  	 	    lista.addAll(el1.getBuff());
	  	 	    lista.add("\t"+"WRT  1"+"\n");
	  	 	  }
	  	 	  
	  	 	}if(el1.getTipo()==Tipo_variable.CADENA || el1.getTipo()==Tipo_variable.CHAR) {
				if(el1.isVector()) {
				  for(int n=0;n<el1.getLongitud();n++) {
				    lista.add(el1.getBuff().get(n*3));
				    lista.add(el1.getBuff().get(n*3+1));
				    lista.add(el1.getBuff().get(n*3+2));  
					lista.add("\t"+"WRT  0"+"\n");
				  }
	  	 	  }else {
	  	 	    lista.addAll(el1.getBuff());
	  	 	    lista.add("\t"+"WRT  0"+"\n");
	  	 	  }
	  	 	}
	  	 	
  		}else if(el1.getTipo()==Tipo_variable.CADENA){
  		  	String tmp=el1.getCadena().substring(1,el1.getCadena().length()-1);
  		  	lista.add("; cadena '"+tmp+"'.\n");
			for(int i=0;i<tmp.length();i++) {
			  lista.add("\t"+"STC  "+(int)tmp.charAt(i)+"\n");
			if(el1.getTipo()==Tipo_variable.ENTERO || el1.getTipo()==Tipo_variable.BOOLEANO) {
	  	 	  	lista.add("\t"+"WRT  1"+"\n");
	  	 	}if(el1.getTipo()==Tipo_variable.CADENA || el1.getTipo()==Tipo_variable.CHAR) {
				lista.add("\t"+"WRT  0"+"\n");
	  	 	}
			}
  		}else {
  		  if(el1.getPara()==Clase_parametro.VAL) { 
  		  	lista.add("; entero '"+Integer.toString(el1.getEntero())+"'.\n");
  		  }
  		  	lista.addAll(el1.getBuff());
	  	 	if(el1.getTipo()==Tipo_variable.ENTERO || el1.getTipo()==Tipo_variable.BOOLEANO) {
	  	 	  	lista.add("\t"+"WRT  1"+"\n");
	  	 	}if(el1.getTipo()==Tipo_variable.CADENA || el1.getTipo()==Tipo_variable.CHAR) {
				lista.add("\t"+"WRT  0"+"\n"); 
	  	 	}
  		}
  	}
  	( t=< tCOMA > (el2=expresion() ) {
  	  
	if((el1.getTipo()==Tipo_variable.CHAR || el1.getTipo()==Tipo_variable.CADENA ||el1.getTipo()==Tipo_variable.ENTERO) &&
		(el2.getTipo()==Tipo_variable.CHAR || el2.getTipo()==Tipo_variable.CADENA || el2.getTipo()==Tipo_variable.ENTERO)) {
		if(el2.getTipo()==Tipo_variable.CHAR) {
		  if(el2.getCaracter()!=null) { 
		  if((int)el2.getCaracter()>=32 && (int)el2.getCaracter() <=254 && el2.getPara()==Clase_parametro.VAL) { 
		  	lista.add("; caracter '"+el2.getCaracter()+"'.\n");
		  }
		}
		  	lista.addAll(el2.getBuff());//lista.add("\t"+"STC  "+(int)el2.getCaracter()+"\n");
	  	 	if(el2.getTipo()==Tipo_variable.ENTERO || el2.getTipo()==Tipo_variable.BOOLEANO) {
	  	 	  	lista.add("\t"+"WRT  1"+"\n");
	  	 	}if(el2.getTipo()==Tipo_variable.CADENA || el2.getTipo()==Tipo_variable.CHAR) {
				lista.add("\t"+"WRT  0"+"\n");
	  	 	}
  		}else if(el2.getTipo()==Tipo_variable.CADENA){
  		  	String tmp=el2.getCadena().substring(1,el2.getCadena().length()-1);
  		  	lista.add("; cadena '"+tmp+"'.\n");
			for(int i=0;i<tmp.length();i++) {
			  lista.add("\t"+"STC  "+(int)tmp.charAt(i)+"\n");
			if(el2.getTipo()==Tipo_variable.ENTERO || el2.getTipo()==Tipo_variable.BOOLEANO) {
	  	 	  	lista.add("\t"+"WRT  1"+"\n");
	  	 	}if(el2.getTipo()==Tipo_variable.CADENA || el2.getTipo()==Tipo_variable.CHAR) {
				lista.add("\t"+"WRT  0"+"\n");
	  	 	}
			}
  		}else {
  		  
  		  if(el2.getPara()==Clase_parametro.VAL) {
  		  	lista.add("; entero '"+Integer.toString(el2.getEntero())+"'.\n");
  		 }
  		  	lista.addAll(el2.getBuff());
  		  	lista.add("\t"+"WRT  1"+"\n");
  		}
	}else {
		error_semantico(t.image, t.beginLine, t.beginColumn, new WrongTypeException());
	} 
  	   })*                 
}catch(ParseException e) {
	error_sintactico(e,"Estructura de escribir incorrecta ");
}
{
  return lista;}
}

ArrayList< String> mientras_que():
{
  Elemento el=null;
  Token t=null;
  String etiqueta1="";
  String etiqueta2="";
  ArrayList< String> mq=new ArrayList<String >();
  ArrayList< String>lista=new ArrayList< String>();
}
{
  try { 
  	t=< tMQ >
  	{
  	  	etiqueta1=codigo.getEtiqueta("MQ");
  	  	mq.add(etiqueta1+":\n");
  	  	mq.add("; MQ.\n");
	} el=expresion()
	{
	  	mq.addAll(el.getBuff());
	  	etiqueta2=codigo.getEtiqueta("MQ");
	  	mq.add("; Salir del bucle si la guarda se evalua a falso.\n");
	  	mq.add("\t"+"JMF  "+etiqueta2+"\n");
		if(el.getTipo()!=Tipo_variable.DESCONOCIDO && el.getTipo()!=Tipo_variable.BOOLEANO){
			error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
	}
		
  	} lista=lista_sentencias()
  	{
  	  	mq.addAll(lista);
  	  	mq.add("; Fin de la iteracion. Saltar a la cabecera del bucle.\n");
  	  	mq.add("\t"+"JMP  "+etiqueta1+"\n");
  	  	mq.add(etiqueta2+":"+"\n");
  	  	mq.add("; Fin MQ."+"\n");
  	}< tFMQ >
 }catch(ParseException e) {
	error_sintactico(e,"Estructura de mientras que incorrecta");
}
{return mq;}
}

ArrayList< String> si():
{
  Elemento el=null;
  Token t=null;
  ArrayList< String> s=new ArrayList< String>();
  ArrayList< String>lista=new ArrayList< String>();
  String etiqueta1="";
  String etiqueta2="";
  boolean sino=false;
}
{
  try { 
  	t=< tSI >
  	{
  	  	etiqueta1=codigo.getEtiqueta("SI");
  	  	s.add("; SI.\n");
  	} el=expresion()
  	{
  	  	s.addAll(el.getBuff());
  	  	s.add("\t"+"JMF  "+etiqueta1+"\n");
  	  	s.add("; ENT.\n");
		if(el.getTipo()!=Tipo_variable.DESCONOCIDO && el.getTipo()!=Tipo_variable.BOOLEANO){
			error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
		}

  	} < tENT > lista=lista_sentencias() 
  	{
  	  s.addAll(lista);
  	  
  	  
  	}
  	(< tSI_NO > lista=lista_sentencias()

  	{
  	  sino=true;
  	  etiqueta2=codigo.getEtiqueta("SI");
  	  s.add("\t"+"JMP  "+etiqueta2+"\n");
  	}
  	)* < tFSI >

 }catch(ParseException e) {
	error_sintactico(e,"Estructura de si incorrecta");
}
{ s.add(etiqueta1+":\n");
  if(sino) {
		s.add("; SI_NO.\n");
		s.addAll(lista);
  	  	s.add(etiqueta2+":\n");
	}
  s.add("; Fin SI:\n");
  return s;}
}

ArrayList< String> argumentos(Simbolo accion):
{
  ArrayList< String> lista=new ArrayList< String>();
}
{
  try { 
  	< tPA > ( lista=lista_expresiones(accion)  )? < tPC >
 }catch(ParseException e) {
	error_sintactico(e,"Estructura de lista de argumentos incorrecta");
}
{return lista;}
}

ArrayList< String> lista_expresiones(Simbolo accion):
{
  Token t=token;
  ArrayList<Simbolo> paraList=null;
  Elemento el1=new Elemento();
  Elemento el2=new Elemento();
  Integer i=0;
  Simbolo parametro=null;
  boolean error=false;
  boolean noPara=false;
  ArrayList< String> lista=new ArrayList< String>();
}
{
  {
    if(accion!=null && accion.ES_ACCION() && accion.getVariable()!=Tipo_variable.DESCONOCIDO){
      paraList=accion.getListaParametros();
      
  	}
  }
  try { 
  	el1=expresion()
	{
	  	lista.addAll(el1.getBuff());
		if(paraList!=null && paraList.size()>i){
			parametro=paraList.get(i);
			i++;
			if(el1!=null && parametro!=null && el1.getTipo()!=Tipo_variable.DESCONOCIDO) {
			  if(parametro.ES_REFERENCIA() && el1.getPara()!=Clase_parametro.REF) {
			    error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongParameterException());
			    error=true;
			  }
			  if(el1.getTipo()!=parametro.getVariable()) {
			    error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongParameterException());
			    error=true;
			  }if(el1.isComplex() && parametro.ES_REFERENCIA()) {
				error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongParameterException());
			    error=true;
			  } 
			} 
		}else {
		  	if(accion.getNombre()!=null) {
		  	  
				error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongActionException());
				error=true;
			}
		}
	}
  	   
  	(t=< tCOMA >el2=expresion()
  	   
	{
	  	lista.addAll(el2.getBuff());
		if(paraList!=null && paraList.size()>i){
			parametro=paraList.get(i);
			i++;
			if(el2!=null && parametro!=null && el2.getTipo()!=Tipo_variable.DESCONOCIDO) {
			  
			  if(parametro.ES_REFERENCIA() && el2.getSimbolo()!=Tipo_simbolo.PARAMETRO &&
			  	 el2.getSimbolo()!=Tipo_simbolo.VARIABLE) {
			    error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongParameterException());
			    error=true;
			  }
			  if(el2.getTipo()!=parametro.getVariable()) {
			    error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongParameterException());
			    error=true;
			  }if(el2.isComplex() && parametro.ES_REFERENCIA()) {
				error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongParameterException());
			    error=true;
			  } 
			} 
		}else {
		  	if(accion.getNombre()!=null) {
				error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongActionException());
				error=true;
			}
		}
	})*
 }catch(ParseException e) {
	error_sintactico(e,"Estructura de lista de expresiones incorrecta");
}
{return lista;}
{
  	
	if(!error && paraList!=null) {
	  if(i!=paraList.size()) {
	    error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongActionException());
	  }
	}
}
}

ArrayList< String> seleccion():
{
  ArrayList< String> s=new ArrayList < String>();
}
{
  try { 
  	< tPRINCIPIO > < tIDENTIFICADOR > < tLLAVE_IZQ > (s=lista_sentencias()) < tLLAVE_DCHA >
 }catch(ParseException e) {
	error_sintactico(e,"Sintaxis de seleccion incorrecta");
}
{return s;}
}

Elemento expresion():
{
  op o1=null;
  op o2=null;
  Token t=token;
  Elemento el=new Elemento();
  ArrayList< String> buff=null;
  Elemento el1=new Elemento();
  Elemento el2=new Elemento();
}
{
  try {
   el1=expresion2(){
    buff=el1.getBuff();
	el.setTipo(el1.getTipo());
	el.setPara(el1.getPara());
	el.setSimbolo(el1.getSimbolo());
	el.setComplex(el1.isComplex());
	el.setVector(el1.isVector());
	el.setLongitud(el1.getLongitud());
	if(el1.getTipo()!=null) {
		switch(el1.getTipo()) {
		case ENTERO:
			el.setEntero(el1.getEntero());
			break;
		case BOOLEANO:
			el.setBool(el1.getBool());
			break;
		case CHAR:
			el.setCaracter(el1.getCaracter());
			break;
		case CADENA:
			el.setCadena(el1.getCadena());
		}
	}
   } (o1=operador_relacional() el2=expresion2(){
     buff.addAll(el2.getBuff());
     if(el1.getTipo()!=Tipo_variable.DESCONOCIDO && el2.getTipo()!=Tipo_variable.DESCONOCIDO) {
       	
     	if(o1!=null) {
     	  	el.setComplex(true);
       		if(el1.getTipo()==el2.getTipo() && !(el1.isVector() && el.isComplex()) && !el2.isVector()) {
       		  
       		  	el.setTipo(Tipo_variable.BOOLEANO);
         		if(el1.getTipo()==Tipo_variable.ENTERO) {
         		  	
					switch (o1) {
						case MAYOR:
							buff.add("\t"+"GT"+"\n");
							if((el1.getEntero()!=null && el2.getEntero()!=null)) { 
								el.setBool(el1.getEntero()>el2.getEntero());
							}
							break;
						case MENOR:
							buff.add("\t"+"LT"+"\n");
							if(el1.getEntero()!=null && el2.getEntero()!=null) { 
								el.setBool(el1.getEntero()<el2.getEntero());
							}
							break;
						case IGUAL:
							buff.add("\t"+"EQ"+"\n");
							if(el1.getEntero()!=null && el2.getEntero()!=null) {
								el.setBool(el1.getEntero()==el2.getEntero());
							}
							break;
						case MAI:
							buff.add("\t"+"GTE"+"\n");
							if(el1.getEntero()!=null && el2.getEntero()!=null) {
								el.setBool(el1.getEntero()>=el2.getEntero());
							}
							break;
						case MEI:
							buff.add("\t"+"LTE"+"\n");
							if(el1.getEntero()!=null && el2.getEntero()!=null) {
								el.setBool(el1.getEntero()<=el2.getEntero());
							}
							break;
						case NI:
							buff.add("\t"+"NEQ"+"\n");
							if(el1.getEntero()!=null && el2.getEntero()!=null) {
								el.setBool(el1.getEntero()!=el2.getEntero());
							}
					}
         		}else if(el1.getTipo()==Tipo_variable.BOOLEANO) {
					switch (o1) {
						case IGUAL:
							buff.add("\t"+"EQ"+"\n");
							if(el1.getBool()!=null && el2.getBool()!=null) {
								el.setBool(el1.getBool()==el2.getBool());
							}
							break;
						case NI:
							buff.add("\t"+"NEQ"+"\n");
							if(el1.getBool()!=null && el2.getBool()!=null) {
								el.setBool(el1.getBool()!=el2.getBool());
							}
							break;
						default:
						System.out.println(buff);
							error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
					}
         		}else if(el.getTipo()==Tipo_variable.CADENA) {
					
					error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
					 
         		}else if(el.getTipo()==Tipo_variable.CHAR) {
					switch (o1) {
						case MAYOR:
							buff.add("\t"+"GT"+"\n");
							if(el1.getCaracter()!=null && el2.getCaracter()!=null) {
								el.setBool(el1.getCaracter()>el2.getCaracter());
							}
							break;
						case MENOR:
							buff.add("\t"+"LT"+"\n");
							if(el1.getCaracter()!=null && el2.getCaracter()!=null) {
								el.setBool(el1.getCaracter()<el2.getCaracter());
							}
							break;
						case IGUAL:
							buff.add("\t"+"EQ"+"\n");
							if(el1.getCaracter()!=null && el2.getCaracter()!=null) {
								el.setBool(el1.getCaracter()==el2.getCaracter());
							}
							break;
						case MAI:
							buff.add("\t"+"GTE"+"\n");
							if(el1.getCaracter()!=null && el2.getCaracter()!=null) {
								el.setBool(el1.getCaracter()>=el2.getCaracter());
							}
							break;
						case MEI:
							buff.add("\t"+"LTE"+"\n");
							if(el1.getCaracter()!=null && el2.getCaracter()!=null) {
								el.setBool(el1.getCaracter()<=el2.getCaracter());
							}
							break;
						case NI:
							buff.add("\t"+"NEQ"+"\n");
							if(el1.getCaracter()!=null && el2.getCaracter()!=null) {
								el.setBool(el1.getCaracter()!=el2.getCaracter());
							}
					}
         		}
        	}else {
        	    
				error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
        	}
     	}else if(t!=null) {
			if(el1.getTipo()==Tipo_variable.BOOLEANO && el2.getTipo()==Tipo_variable.BOOLEANO) {
				el.setTipo(Tipo_variable.BOOLEANO);
				if(el1.getBool()!=null && el2.getBool()!=null) {
					el.setBool(el1.getBool() || el2.getBool());
				}
			}else {
				error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
			}
    	}
   	}else if(el1.getTipo()==Tipo_variable.DESCONOCIDO && el2.getTipo()!=Tipo_variable.DESCONOCIDO){
		el=el2;
   	}else if(el1.getTipo()!=Tipo_variable.DESCONOCIDO && el2.getTipo()==Tipo_variable.DESCONOCIDO){
		el=el1;
   	}else {
   	  el.setTipo(Tipo_variable.DESCONOCIDO);
   	}
  })*
 }catch(ParseException e) {
	error_sintactico(e,"Sintaxis de expresion incorrecta");
}
	{ 
	  el.setBuff(buff);
	  return el;}
}

Elemento expresion2():
{
  op o1=null;
  op o2=null;
  Token t=null;
  ArrayList< String> buff=new ArrayList< String>();
  Elemento el=new Elemento();
  Elemento el1=new Elemento();
  Elemento el2=new Elemento();
}
{
  try {
    (o1=operador_aditivo()
    {
      el.setComplex(true);
    }
    )? el1=expresion3() {
    buff.addAll(el1.getBuff());
	el.setTipo(el1.getTipo());
	el.setPara(el1.getPara());
	el.setSimbolo(el1.getSimbolo());
	el.setComplex(el1.isComplex());
	el.setVector(el1.isVector());
	el.setLongitud(el1.getLongitud());
	if(el1.getTipo()!=null) {
		switch(el1.getTipo()) {
			case ENTERO:
				if(o1==op.RESTA) {
				  	buff.add("\t"+"NGI"+"\n");
					el.setEntero(-el1.getEntero());
	 			 }else { 
					el.setEntero(el1.getEntero());
				}
				break;
			case BOOLEANO:
				if(o1==op.RESTA) {
					error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
	 			 }
				el.setBool(el1.getBool());
				break;
			case CHAR:
				if(o1==op.RESTA) {
					error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
	 			 }
				el.setCaracter(el1.getCaracter());
				break;
			case CADENA:
				if(o1==op.RESTA) {
					error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
	 			 }
				el.setCadena(el1.getCadena());
		}
	}
   } ((o2=operador_aditivo()|t=< tOR >) el2=expresion3(){
     buff.addAll(el2.getBuff());
     if(el1.getTipo()!=Tipo_variable.DESCONOCIDO && el2.getTipo()!=Tipo_variable.DESCONOCIDO) { 
     	if(o2!=null) {
     	  t=token;
     	  	el.setComplex(true);
       		if(el1.getTipo()==Tipo_variable.ENTERO && el2.getTipo()==Tipo_variable.ENTERO ) {
         		if(!(el1.isVector() && el.isComplex()) && !el2.isVector()) {
					el.setTipo(Tipo_variable.ENTERO);
					switch (o2) {
						case SUMA:
							buff.add("\t"+"PLUS"+"\n");
							if(el1.getEntero()!=null && el2.getEntero()!=null) { 
								el.setEntero(el1.getEntero()+el2.getEntero());
							}
							break;
						case RESTA:
							buff.add("\t"+"SBT"+"\n");
							if(el1.getEntero()!=null && el2.getEntero()!=null) {
								el.setEntero(el1.getEntero()-el2.getEntero());
							}
					}
         		}if(el1.isVector() || el2.isVector()) {
         		  
					error_semantico(token.image, token.beginLine, token.beginColumn, new WrongExpresionException());
         		}
        	}else if(t!=null){
        	    
				error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
        	}
     	}else if(t!=null) {
     	  	el.setComplex(true);
			if(el1.getTipo()==Tipo_variable.BOOLEANO && el2.getTipo()==Tipo_variable.BOOLEANO && !el1.isVector() && !el2.isVector()) {
				el.setTipo(Tipo_variable.BOOLEANO);
				buff.add("\t"+"OR"+"\n");
				if(el1.getBool()!=null && el2.getBool()!=null) {
					el.setBool(el1.getBool() || el2.getBool());
				}
			}else {
				error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
			}
    	}
   	}else if(el1.getTipo()==Tipo_variable.DESCONOCIDO && el2.getTipo()!=Tipo_variable.DESCONOCIDO){
		el=el2;
   	}else if(el1.getTipo()!=Tipo_variable.DESCONOCIDO && el2.getTipo()==Tipo_variable.DESCONOCIDO){
		el=el1;
   	}else {
   	  el.setTipo(Tipo_variable.DESCONOCIDO);
   	}
  })*
    
 }catch(ParseException e) {
	error_sintactico(e,"Sintaxis de expresion incorrecta");
}
	{
	el.setBuff(buff);
	return el;
	}
}

Elemento expresion3():
{
  op o=null;
  Token t=null;
  ArrayList< String>buff=null;
  Elemento el=new Elemento();
  Elemento el1=new Elemento();
  Elemento el2=new Elemento();
}
{
  try {
   el1=factor() {
     buff=el1.getBuff();
	el.setTipo(el1.getTipo());
	el.setPara(el1.getPara());
	el.setSimbolo(el1.getSimbolo());
	el.setVector(el1.isVector());
	el.setLongitud(el1.getLongitud());
	if(el1.getTipo()!=null) {
		switch(el1.getTipo()) {
			case ENTERO:
				el.setEntero(el1.getEntero());
				break;
			case BOOLEANO:
				el.setBool(el1.getBool());
				break;
			case CHAR:
				el.setCaracter(el1.getCaracter());
				break;
			case CADENA:
				el.setCadena(el1.getCadena());
		}
	}
   }( (o=operador_multiplicativo()|t=< tAND >) el2=factor() {
     buff.addAll(el2.getBuff());
     if(el1.getTipo()!=Tipo_variable.DESCONOCIDO && el2.getTipo()!=Tipo_variable.DESCONOCIDO ) { 
     	if(o!=null) {
     	  t=token;
     	  el.setComplex(true);
     	  	
       		if(el1.getTipo()==Tipo_variable.ENTERO && el2.getTipo()==Tipo_variable.ENTERO && !(el1.isVector() && el.isComplex()) && !el2.isVector()) {
					el.setTipo(Tipo_variable.ENTERO);
					switch (o) {
						case MULL:
							buff.add("\t"+"TMS"+"\n");
							if(el1.getEntero()!=null && el2.getEntero()!=null ) {
								el.setEntero(el1.getEntero()*el2.getEntero());
							}
							break;
						case DIV:
							buff.add("\t"+"DIV"+"\n");
							if(el2.getEntero()==0) {
								error_semantico(t.image, t.beginLine, t.beginColumn, new DivZeroException());
							}else {
							  if(el1.getEntero()!=null && el2.getEntero()!=null ) {
								el.setEntero(el1.getEntero()/el2.getEntero());
							  }
							}
							break;
						case DIV1:
							buff.add("\t"+"DIV"+"\n");
							
							  if(el1.getEntero()!=null && el2.getEntero()!=null ) {
							    if(el2.getEntero()==0) {
									error_semantico(t.image, t.beginLine, t.beginColumn, new DivZeroException());
								}else {
									el.setEntero(el1.getEntero()/el2.getEntero());
								}
							  }
							
							break;
						case MOD:
							buff.add("\t"+"MOD"+"\n");
							
							  if(el1.getEntero()!=null && el2.getEntero()!=null ) {
							    if(el2.getEntero()==0) {
									error_semantico(t.image, t.beginLine, t.beginColumn, new DivZeroException());
								}else {
									el.setEntero(el1.getEntero()%el2.getEntero());
								}
							}
							
					}
         		if(el1.isVector() || el2.isVector()) {
					error_semantico(token.image, token.beginLine, token.beginColumn, new WrongExpresionException());
         		}
        	}else if(t!=null){
				error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
			}
     	}else if(t!=null) {
     	  	el.setComplex(true);
			if(el1.getTipo()==Tipo_variable.BOOLEANO && el2.getTipo()==Tipo_variable.BOOLEANO) {
				el.setTipo(Tipo_variable.BOOLEANO);
				buff.add("\t"+"AND"+"\n");
				if(el1.getBool()!=null && el2.getBool()!=null) {
					el.setBool(el1.getBool() && el2.getBool());
				}
			}else {
			  
				error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
			}
    	}
   	}else if(el1.getTipo()==Tipo_variable.DESCONOCIDO && el2.getTipo()!=Tipo_variable.DESCONOCIDO){
		el=el2;
   	}else if(el1.getTipo()!=Tipo_variable.DESCONOCIDO && el2.getTipo()==Tipo_variable.DESCONOCIDO){
		el=el1;
   	}else {
   	  el.setTipo(Tipo_variable.DESCONOCIDO);
   	}
  })*
   
 }catch(ParseException e) {
	error_sintactico(e,"Sintaxis de expresion incorrecta");
}
	{ 
	  el.setBuff(buff);
	  return el;}
}

op operador_relacional():
{
} 
{
  try { 
	 < tMENOR >	{return op.MENOR;}
	| < tMAYOR >{return op.MAYOR;}
	| < tMEI >	{return op.MEI;}
	| < tMAI >	{return op.MAI;}
	| < tIGUAL >{return op.IGUAL;}
	| < tNI >	{return op.NI;}
	
}catch(ParseException e) {
	error_sintactico(e,"Operador relacional no encontrado");
}

}

op operador_aditivo():
{
}
{
  try { 
  < tRESTA >	{return op.RESTA;}
	| < tSUMA >	{return op.SUMA;}
}catch(ParseException e) {
	error_sintactico(e,"Operador aditivo no encontrado");
}
}

op operador_multiplicativo():
{
} 
{
  try { 
  < tMULL >		{return op.MULL;}
	| < tDIV >	{return op.DIV;}
	| < tDIV1 >	{return op.DIV1;}
	| < tMOD >	{return op.MOD;}
}catch(ParseException e) {
	error_sintactico(e,"Operador multiplicativo no encontrado");
}
}

Elemento factor():
{
  Token t=null;
  Elemento el=new Elemento();
  ArrayList< String> buff=new ArrayList< String>();
}
{
  try { 
  (t=< tNOT >)? el=factor2() {
    buff.addAll(el.getBuff());
	if(t!=null ) {
		if(el.getTipo()==Tipo_variable.DESCONOCIDO || el.getTipo()==Tipo_variable.BOOLEANO) {
			if(el.getBool()!=null) {
				el.setBool(!el.getBool());
			}
		}else {
		  
			error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
		}
		
		buff.add("\t"+"NGB"+"\n");
		
	}
  }
}catch(ParseException e) {
	error_sintactico(e,"Factor no encontrado");
}
	{ 
	  el.setBuff(buff);
	  return el;}
}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////RECORDATORIO////////////////////////////////////
////////////////////////////AÑADIR !NULL PARA ELEMENTO//////////////////////////////
///////////////////////////////EN CARAENT Y ENTACAR/////////////////////////////////
Elemento factor2():
{
  Token t=null;
  Elemento E=new Elemento();
  Simbolo s=null;
  ArrayList< String> buff=new ArrayList< String>();
  Elemento e=new Elemento();
  boolean hayExpresion=false;
}
{
  try {
     
   < tPA > e=expresion() < tPC > { e.setBuff(e.getBuff());}
	| t=< tENTACAR > < tPA > e=expresion() { 
	  	Character c=null;
		if(e.getTipo()==Tipo_variable.ENTERO ) { 
		  if(e.getEntero()!=null) { 
			if(e.getEntero() <0 || e.getEntero() >255 ) {
			  error_semantico(t.image, t.beginLine, t.beginColumn, new OutOfBoundsIntExcepction());
			}else {
			  
			  c=(char)e.getEntero().intValue();
			  
			  buff.add("\t"+"STC  "+e.getEntero()+"\n");
			  
			}
			}
		}else {
		  
		  error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
		} 
		e=new Elemento();
		e.setTipo(Tipo_variable.CHAR);
		e.setCaracter(c);
		e.setBuff(buff);

	} < tPC >
	| t=< tCARAENT > < tPA > e=expresion(){
	  	
	  	Integer en=null;
		if(e.getTipo()==Tipo_variable.CHAR ) {
		  if(e.getCaracter()!=null) { 
			en=(int)e.getCaracter().charValue();
			buff.add("\t"+"STC  "+en+"\n"); 
			}
		}else {
		  error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
		} 
		e=new Elemento();
		e.setTipo(Tipo_variable.ENTERO);
		e.setEntero(en);
		e.setBuff(buff);

	} < tPC >
	| t=< tIDENTIFICADOR >( { hayExpresion=true; }< tCORCH_I >E=expresion()< tCORCH_D >)? {
	   try {
	     	int v=0;
	     	
	     	s=tabla_simbolos.buscar_simbolo(t.image);
	     	if(hayExpresion) {
				if(E.getTipo()!=Tipo_variable.ENTERO) {
				  
					error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
				}else {
				  	if(E.getEntero()!=null) {
				  	    System.out.println(s.getNombre()+" "+s.getLongitud()); 
						if(s.getLongitud()< E.getEntero() || E.getEntero()<0 ) {
							error_semantico(t.image, t.beginLine, t.beginColumn, new VectorIndexException());
						}else {
		     				buff.add("; Acceso a la variable "+t.image+".\n");
		     				buff.add("\t"+"SRF  "+(nivel-s.getNivel())+"  "+(s.getDir()+E.getEntero()+1)+"\n");
		     				buff.add("\t"+"DRF"+"\n");
		     				buff.add(";Comprobamos si i esta inicializada.\n");
		     				buff.add("\t"+"DUP"+"\n");
		     				buff.add("\t"+"STC  32768"+"\n");
		     				buff.add("\t"+"EQ"+"\n");
		     				buff.add("\t"+"JMT  error_inicializada\n");
		     				buff.add(";sino, seguimos ejecucion.\n");
		     				e.setPara(Clase_parametro.VAL);
			     		}
		     		}else {
						buff.add("; Acceso a la variable "+t.image+".\n");
		     			buff.add("\t"+"SRF  "+(nivel-s.getNivel())+"  "+s.getDir()+"\n");     		
		     			buff.addAll(E.getBuff());
		     			buff.add("\t"+"PLUS"+"\n");
		     			buff.add("\t"+"DRF"+"\n");
		     			buff.add(";Comprobamos si i esta inicializada.\n");
		     			buff.add("\t"+"DUP"+"\n");
		     			buff.add("\t"+"STC  32768"+"\n");
		     			buff.add("\t"+"EQ"+"\n");
		     			buff.add("\t"+"JMT  error_inicializada\n");
		     			buff.add(";sino, seguimos ejecucion.\n");
		     		}
	     		}		
  		    }else { 
		     	buff.add("; Acceso a la variable "+t.image+".\n");
		     	buff.add("\t"+"SRF  "+(nivel-s.getNivel())+"  "+s.getDir()+"\n");
		     	if(!s.ES_VECTOR()) {
		     		buff.add("\t"+"DRF"+"\n");
		     		buff.add(";Comprobamos si i esta inicializada.\n");
		     		buff.add("\t"+"DUP"+"\n");
		     		buff.add("\t"+"STC  32768"+"\n");
		     		buff.add("\t"+"EQ"+"\n");
		     		buff.add("\t"+"JMT  error_inicializada\n");
		     		buff.add(";sino, seguimos ejecucion.\n");
		    	}
		    }
	     	e.setSimbolo(s.getTipo());
	     	if(s.ES_PARAMETRO()) {
				e.setPara(s.getParametro()); 
	     	}if(s.ES_VARIABLE()&& !s.ES_VECTOR()) {
				e.setPara(Clase_parametro.REF);
	     	}if(s.ES_PROGRAMA()) {
				error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
	     	}if(s.ES_ACCION()) {
				error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
	     	}if(s.ES_VECTOR()&& !hayExpresion) {
				e.setVector(true);
				e.setLongitud(s.getLongitud());
				e.setPara(s.getParametro());
	     	}
	     	e.setTipo(s.getVariable());
	     	//Para poder realizar pruebas con el analizador semantico se han inicializado todas las variables
	     	//con un valor por defecto, mas adelante se le dara el valor correspondiente
	     }catch(SimboloNoEncontradoException es) {
			error_semantico(t.image, t.beginLine, t.beginColumn, es);
			try {
				s=tabla_simbolos.introducir_variable(t.image, Tipo_variable.DESCONOCIDO,nivel, direccion);
				direccion++;
				e.setTipo(Tipo_variable.DESCONOCIDO);
				
				if(s.ES_PARAMETRO()) {
					e.setPara(s.getParametro());
	     		}
			}catch(SimboloYaDeclaradoException ex) {}
			
		}
		e.setBuff(buff);
	} 
	| t=< tVALOR_CARACTER >{
	  	buff.add("\t"+"STC  "+(int)t.image.charAt(1)+"\n");
	  	e.setPara(Clase_parametro.VAL);
		e.setTipo(Tipo_variable.CHAR);
		e.setCaracter(t.image.charAt(1));
		e.setBuff(buff);
		
	} 
	| t=< tVALOR_CADENA >{
	  	e.setPara(Clase_parametro.VAL); 
		e.setTipo(Tipo_variable.CADENA);
		e.setCadena(t.image);
		
	}
	| t=< tVALOR_CADENA_VACIA >{
	  	buff.add("\t"+"STC  "+0+"\n");
	  	e.setPara(Clase_parametro.VAL);
		e.setTipo(Tipo_variable.CADENA);
		e.setCadena(t.image);
		e.setBuff(buff);
		
	}
	| t=< tVALOR_ENTERO >{
	  	buff.add("\t"+"STC  "+Integer.parseInt(t.image)+"\n");
	  	e.setPara(Clase_parametro.VAL);
		e.setTipo(Tipo_variable.ENTERO);
		e.setEntero(Integer.parseInt(t.image));
		e.setBuff(buff);
		
	}
	| t=< tTRUE >{
	  	buff.add("\t"+"STC  1"+"\n");
	  	e.setPara(Clase_parametro.VAL);
		e.setTipo(Tipo_variable.BOOLEANO);
		e.setBool(true);
		e.setBuff(buff);
		
	}
	| t=< tFALSE >{
	  	buff.add("\t"+"STC  0"+"\n");
	  	e.setPara(Clase_parametro.VAL);
		e.setTipo(Tipo_variable.BOOLEANO);
		e.setBool(false);
		e.setBuff(buff);
	}

	
}catch(ParseException esc) {
	error_sintactico(esc,"Sintaxis de factor incorrecta");
}
{ 
  return e;}
}
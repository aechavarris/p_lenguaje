/* Generated By:JavaCC: Do not edit this line. minilengcompilerConstants.java */
package analizador;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface minilengcompilerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int tPROGRAMA = 11;
  /** RegularExpression Id. */
  int tACCION = 12;
  /** RegularExpression Id. */
  int tENT = 13;
  /** RegularExpression Id. */
  int tSI_NO = 14;
  /** RegularExpression Id. */
  int tPRINCIPIO = 15;
  /** RegularExpression Id. */
  int tFIN = 16;
  /** RegularExpression Id. */
  int tMQ = 17;
  /** RegularExpression Id. */
  int tFMQ = 18;
  /** RegularExpression Id. */
  int tSI = 19;
  /** RegularExpression Id. */
  int tFSI = 20;
  /** RegularExpression Id. */
  int tMOD = 21;
  /** RegularExpression Id. */
  int tESCRIBIR = 22;
  /** RegularExpression Id. */
  int tLEER = 23;
  /** RegularExpression Id. */
  int tENTACAR = 24;
  /** RegularExpression Id. */
  int tCARAENT = 25;
  /** RegularExpression Id. */
  int tSUMA = 26;
  /** RegularExpression Id. */
  int tRESTA = 27;
  /** RegularExpression Id. */
  int tMULL = 28;
  /** RegularExpression Id. */
  int tDIV = 29;
  /** RegularExpression Id. */
  int tDIV1 = 30;
  /** RegularExpression Id. */
  int tMAYOR = 31;
  /** RegularExpression Id. */
  int tMENOR = 32;
  /** RegularExpression Id. */
  int tIGUAL = 33;
  /** RegularExpression Id. */
  int tOAS = 34;
  /** RegularExpression Id. */
  int tMAI = 35;
  /** RegularExpression Id. */
  int tMEI = 36;
  /** RegularExpression Id. */
  int tNI = 37;
  /** RegularExpression Id. */
  int tAND = 38;
  /** RegularExpression Id. */
  int tOR = 39;
  /** RegularExpression Id. */
  int tNOT = 40;
  /** RegularExpression Id. */
  int tENTERO = 41;
  /** RegularExpression Id. */
  int tBOOLEANO = 42;
  /** RegularExpression Id. */
  int tCARACTER = 43;
  /** RegularExpression Id. */
  int tVAL = 44;
  /** RegularExpression Id. */
  int tREF = 45;
  /** RegularExpression Id. */
  int tTRUE = 46;
  /** RegularExpression Id. */
  int tFALSE = 47;
  /** RegularExpression Id. */
  int tLLAVE_IZQ = 48;
  /** RegularExpression Id. */
  int tLLAVE_DCHA = 49;
  /** RegularExpression Id. */
  int tPA = 50;
  /** RegularExpression Id. */
  int tPC = 51;
  /** RegularExpression Id. */
  int tCORCH_I = 52;
  /** RegularExpression Id. */
  int tCORCH_D = 53;
  /** RegularExpression Id. */
  int DIGITO = 54;
  /** RegularExpression Id. */
  int LETRA = 55;
  /** RegularExpression Id. */
  int BOOLEAN = 56;
  /** RegularExpression Id. */
  int LETRAID_INICIAL = 57;
  /** RegularExpression Id. */
  int LETRAID_FINAL = 58;
  /** RegularExpression Id. */
  int CARACTER = 59;
  /** RegularExpression Id. */
  int CADENA = 60;
  /** RegularExpression Id. */
  int CADENA_VACIA = 61;
  /** RegularExpression Id. */
  int tVALOR_ENTERO = 62;
  /** RegularExpression Id. */
  int tVALOR_CARACTER = 63;
  /** RegularExpression Id. */
  int tVALOR_CADENA = 64;
  /** RegularExpression Id. */
  int tVALOR_CADENA_VACIA = 65;
  /** RegularExpression Id. */
  int tVALOR_BOOLEANO = 66;
  /** RegularExpression Id. */
  int tIDENTIFICADOR = 67;
  /** RegularExpression Id. */
  int tFIN_SENTENCIA = 68;
  /** RegularExpression Id. */
  int tCOMA = 69;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int COMLINE = 1;
  /** Lexical state. */
  int COMBLOCK = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"%\"",
    "\"%%\"",
    "\"\\n\"",
    "\"%%\"",
    "<token of kind 9>",
    "<token of kind 10>",
    "\"programa\"",
    "\"accion\"",
    "\"ent\"",
    "\"si_no\"",
    "\"principio\"",
    "\"fin\"",
    "\"mq\"",
    "\"fmq\"",
    "\"si\"",
    "\"fsi\"",
    "\"mod\"",
    "\"escribir\"",
    "\"leer\"",
    "\"entacar\"",
    "\"caraent\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"div\"",
    "\">\"",
    "\"<\"",
    "\"=\"",
    "\":=\"",
    "\">=\"",
    "\"<=\"",
    "\"<>\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"entero\"",
    "\"booleano\"",
    "\"caracter\"",
    "\"val\"",
    "\"ref\"",
    "\"true\"",
    "\"false\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "<DIGITO>",
    "<LETRA>",
    "<BOOLEAN>",
    "<LETRAID_INICIAL>",
    "<LETRAID_FINAL>",
    "<CARACTER>",
    "<CADENA>",
    "<CADENA_VACIA>",
    "<tVALOR_ENTERO>",
    "<tVALOR_CARACTER>",
    "<tVALOR_CADENA>",
    "<tVALOR_CADENA_VACIA>",
    "<tVALOR_BOOLEANO>",
    "<tIDENTIFICADOR>",
    "\";\"",
    "\",\"",
  };

}

/* Generated By:JavaCC: Do not edit this line. minilengcompiler.java */
package analizador;
import java.io.*;
import lib.aviso.*;
import lib.semantico.*;
import java.util.ArrayList;
import lib.semantico.Simbolo.*;
import lib.semantico.Elemento.*;

public class minilengcompiler implements minilengcompilerConstants {

  static boolean errorSintactico = false;
  static boolean errorSemantico = false;
  static TablaSimbolos tabla_simbolos = new TablaSimbolos();
  static int nivel = 0;
  static int direccion=3;
  static int ejecucion_correcta=1;

         public static void main(String args []) throws ParseException {
           tabla_simbolos.inicializar_tabla();
            if (args.length != 0 ) {
                        File tmp = new File(args[0]);
                        String file = tmp.getAbsolutePath()+".ml";
                        try {
                                minilengcompiler parser = new minilengcompiler(new FileInputStream(file));
                        }
                        catch (FileNotFoundException e) {
                                System.out.printf("No existe el fichero: "+ file + "\u005cn");
                                System.exit(1);
                        }
        }
        else {
            System.out.printf("Leyendo de la entrada estandar..." + "\u005cn");
                        minilengcompiler parser = new minilengcompiler(System.in);
        }
                try {
                    minilengcompiler.programa();

                    if ( errorSintactico ) {
                                System.out.println("Hay uno o m\u00e1s errores sint\u00e1cticos");
                                System.exit(1);
                    }

                    if ( errorSemantico ) {
                                System.out.println("Hay uno o m\u00e1s errores sem\u00e1nticos");
                                System.exit(1);
                    }

                    System.out.println("Analizado correctamente");
                }
                catch(TokenMgrError e) {
                     // ERRORES LEXICOS
                     try {
                                String simbolo = String.valueOf(minilengcompilerTokenManager.input_stream.readChar());
                        String fil = String.valueOf(minilengcompilerTokenManager.input_stream.getEndLine());
                        String col = String.valueOf(minilengcompilerTokenManager.input_stream.getEndColumn());

                        System.err.println("ERROR L\u00c9XICO (<" + fil + ", " + col + ">): s\u00edmbolo no reconocido: <" + simbolo + ">");
                        ejecucion_correcta=0;
                        return;
                     }
                     catch (Exception ex) { }
                }
         }

         private static void error_sintactico(ParseException e, String mensaje) {
        // ERRORES SINTACTICOS
        Token ultimoLeido = minilengcompiler.getNextToken();
        int fil = ultimoLeido.beginLine;
        int col = ultimoLeido.beginColumn;
        String current = ultimoLeido.image;

        System.out.println("ERROR SINT\u00c1CTICO (<" + fil  + ", " + col + ">): Token obtenido -> " + current + " -> " + mensaje );
        if ( !errorSintactico ) {
                        errorSintactico = true;
                }
                ejecucion_correcta=0;
        }

        private static void error_semantico(String name, int f, int col, Exception except) {
                // ERRORES SEMÁNTICOS
                if ( !errorSemantico ) {
                        errorSemantico = true;
                }

                if (except instanceof SimboloNoEncontradoException) {
                        System.out.println("ERROR SEM\u00c1NTICO: <No se ha encontrado el s\u00edmbolo llamado: " + name + "> en (<" + f  + ", " + col + ">)");
            }
                else if (except instanceof SimboloYaDeclaradoException) {
                        System.out.println("ERROR SEM\u00c1NTICO: <Ya ha sido declarado el s\u00edmbolo llamado: " + name + "> en (<" + f  + ", " + col + ">)");
                }else if (except instanceof OutOfBoundsIntExcepction) {
                        System.out.println("ERROR SEM\u00c1NTICO: <Entero fuera de rango dentro de: " + name + "> en (<" + f  + ", " + col + ">)");
                }else if (except instanceof WrongExpresionException) {
                        System.out.println("ERROR SEM\u00c1NTICO: <Expresion no valida cerca de: " + name + "> en (<" + f  + ", " + col + ">)");
                }else if (except instanceof DivZeroException) {
                        System.out.println("ERROR SEM\u00c1NTICO: <Division por 0 encontrada dentro de: " + name + "> en (<" + f  + ", " + col + ">)");
                }else if (except instanceof WrongTypeException) {
                        System.out.println("ERROR SEM\u00c1NTICO: <Tipo incorrecto cerca de: " + name + "> en (<" + f  + ", " + col + ">)");
                }else if (except instanceof WrongParameterException) {
                        System.out.println("ERROR SEM\u00c1NTICO: <Parametro incorrecto cerca de: " + name + "> en (<" + f  + ", " + col + ">)");
                }else if (except instanceof WrongActionException) {
                        System.out.println("ERROR SEM\u00c1NTICO: <Accion incorrecta encontrada en: " + name + "> en (<" + f  + ", " + col + ">)");
                }else if (except instanceof SimboloNoAsignableException) {
                        System.out.println("ERROR SEM\u00c1NTICO: <Simbolo no asignable encontrado en: " + name + "> en (<" + f  + ", " + col + ">)");
                }


                ejecucion_correcta=0;
        }

  static final public void programa() throws ParseException {
  Token p=null;
    try {
      jj_consume_token(tPROGRAMA);
      p = jj_consume_token(tIDENTIFICADOR);
                  if(p!=null){
                        tabla_simbolos.introducir_programa(p.image,0);
                        tabla_simbolos.imprimirTabla();
                  }
      jj_consume_token(tFIN_SENTENCIA);
      declaracion_variables();
      declaracion_acciones();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tPRINCIPIO:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        bloque_sentencias();
      }
           if(ejecucion_correcta==1) {
                        tabla_simbolos.eliminar_variables(nivel);
                        tabla_simbolos.eliminar_acciones(nivel);
                        tabla_simbolos.eliminar_programa();
                        tabla_simbolos.imprimirTabla();
           }
    } catch (ParseException e) {
                error_sintactico(e,"Sintaxis de programa incorrecta");
    }
  }

  static final public void sentencia() throws ParseException {
  Token t=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tLEER:
        leer();
        jj_consume_token(tFIN_SENTENCIA);
        break;
      case tESCRIBIR:
        escribir();
        jj_consume_token(tFIN_SENTENCIA);
        break;
      case tIDENTIFICADOR:
        t = jj_consume_token(tIDENTIFICADOR);
        asignacion_invocacion_accion(t);
        jj_consume_token(tFIN_SENTENCIA);
        break;
      case tPRINCIPIO:
        seleccion();
        break;
      case tMQ:
        mientras_que();
        break;
      case tSI:
        si();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        error_sintactico(e,"Sintaxis de sentencia incorrecta");
    }
  }

  static final public void asignacion_invocacion_accion(Token t) throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tOAS:
        asignacion(t);
        break;
      default:
        jj_la1[2] = jj_gen;
        invocacion_accion(t);
      }
    } catch (ParseException e) {
        error_sintactico(e,"No se encuentra asignacion o invocacion a accion");
    }
  }

  static final public void asignacion(Token t) throws ParseException {
  Simbolo s=null;
  Elemento el=new Elemento();
  Elemento el1=new Elemento();
    try {
                try {
                        s=tabla_simbolos.buscar_simbolo(t.image);
                        el.setTipo(s.getVariable());
                        if(s.ES_ACCION() ||s.ES_PROGRAMA() || s.ES_VALOR()) {
                                        error_semantico(t.image, t.beginLine, t.beginColumn, new SimboloNoAsignableException());
                        }
                }catch(SimboloNoEncontradoException e) {
                        error_semantico(t.image, t.beginLine, t.beginColumn, e);
                        try {
                                        s=tabla_simbolos.introducir_variable(t.image, Tipo_variable.DESCONOCIDO,nivel, direccion);
                                        direccion++;
                                        el.setTipo(Tipo_variable.DESCONOCIDO);

                                        if(s.ES_PARAMETRO()) {
                                                el.setPara(s.getParametro());
                                }
                                }catch(SimboloYaDeclaradoException ex) {}
                }
      jj_consume_token(tOAS);
      el1 = expresion();
        if(el1.getTipo()!=Tipo_variable.DESCONOCIDO && el.getTipo()!=Tipo_variable.DESCONOCIDO) {

                if(el1.getTipo()!= el.getTipo()) {
                        error_semantico(t.image, t.beginLine, t.beginColumn, new SimboloNoAsignableException());
                }else {
                        switch(el1.getTipo()) {
                                case ENTERO:
                                        break;
                                case CHAR:

                                        break;
                                case BOOLEANO:

                                        break;
                                case CADENA:

                                        break;
                                default:
                        }
                }
        }else {
                error_semantico(t.image, t.beginLine, t.beginColumn, new SimboloNoAsignableException());
        }
    } catch (ParseException e) {
        error_sintactico(e,"Sintaxis de asignacion incorrecta");
    }
  }

  static final public void invocacion_accion(Token t) throws ParseException {
  Simbolo accion=new Simbolo();
    try {
        accion=tabla_simbolos.buscar_simbolo(t.image);
        if(accion.getVariable()!=Tipo_variable.DESCONOCIDO && !accion.ES_ACCION()) {
                        error_semantico(t.image, t.beginLine, t.beginColumn, new WrongActionException());
        }
    }catch(SimboloNoEncontradoException e) {
      error_semantico(t.image, t.beginLine, t.beginColumn, e);
    }
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tPA:
        argumentos(accion);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        error_sintactico(e,"Sintaxis de invocacion a accion incorrecta");
    }
  }

  static final public void declaracion_variables() throws ParseException {
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tENTERO:
        case tBOOLEANO:
        case tCARACTER:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        declaracion();
        jj_consume_token(tFIN_SENTENCIA);
      }
    } catch (ParseException e) {
        error_sintactico(e,"Declaracion de variables incorrecta");
    }
  }

  static final public void declaracion() throws ParseException {
  Tipo_variable tipo = null;
  ArrayList<Token > tokens = null;
    try {
      tipo = tipo_variables();
      tokens = identificadores();
                for(int i=0;i<tokens.size();i++) {
                  try {
                        tabla_simbolos.introducir_variable(tokens.get(i).image,tipo,nivel,direccion);
                        direccion=direccion+1;
                        tabla_simbolos.imprimirTabla();
                  } catch(SimboloYaDeclaradoException e) {
                      token = tokens.get(i);
                          error_semantico(token.image, token.beginLine, token.beginColumn, e);
                    }
                }
    } catch (ParseException e) {
        error_sintactico(e,"Sintaxis incorrecta");
    }
  }

  static final public Tipo_variable tipo_variables() throws ParseException {
  Tipo_variable tipo=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tENTERO:
        jj_consume_token(tENTERO);
                     tipo=Tipo_variable.ENTERO;
        break;
      case tCARACTER:
        jj_consume_token(tCARACTER);
                         tipo=Tipo_variable.CHAR;
        break;
      case tBOOLEANO:
        jj_consume_token(tBOOLEANO);
                         tipo=Tipo_variable.BOOLEANO;
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        error_sintactico(e,"No se ha encontrado tipo de variable");
    }
 {if (true) return tipo;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Token> identificadores() throws ParseException {
  Token t=null;
  ArrayList<Token> tokens = new ArrayList<Token>();
    try {
      t = jj_consume_token(tIDENTIFICADOR);
                  if(t!=null){
                                tokens.add(t);
                        }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tCOMA:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        jj_consume_token(tCOMA);
        t = jj_consume_token(tIDENTIFICADOR);
                  if(t!=null){
                        tokens.add(t);
                        }
      }
    } catch (ParseException e) {
        error_sintactico(e,"Sintaxis en definicion de identificadores incorrecta");
    }
 {if (true) return tokens;}
    throw new Error("Missing return statement in function");
  }

  static final public void declaracion_acciones() throws ParseException {
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tACCION:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        declaracion_accion();
      }
    } catch (ParseException e) {
        error_sintactico(e,"Declaracion de acciones incorrecta");
    }
  }

  static final public void declaracion_accion() throws ParseException {
  int direccion_anterior=direccion;
    try {
      cabecera_accion();
      declaracion_variables();
      declaracion_acciones();
      bloque_sentencias();
          tabla_simbolos.eliminar_variables(nivel);
          tabla_simbolos.eliminar_parametros(nivel);
          direccion=direccion_anterior;
          tabla_simbolos.imprimirTabla();
          nivel=nivel-1;
    } catch (ParseException e) {
        error_sintactico(e,"Estructura de accion incorrecta");
    }
  }

  static final public void cabecera_accion() throws ParseException {
  Token t=null;
  Simbolo s=null;
  boolean encontrado=false;
  ArrayList<Simbolo > parametros=new ArrayList<Simbolo>();
    try {
      jj_consume_token(tACCION);
      t = jj_consume_token(tIDENTIFICADOR);
                if(t != null){
                  try {
                        s=tabla_simbolos.introducir_accion(t.image,nivel,direccion);
                        if(s!=null) {
                                encontrado=true;
                        }
                        direccion = direccion+1;
                        tabla_simbolos.imprimirTabla();
                  } catch(SimboloYaDeclaradoException e) {
                          error_semantico(t.image, t.beginLine, t.beginColumn, e);
                    }
                }
                nivel=nivel+1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tPA:
        parametros = parametros_formales();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(tFIN_SENTENCIA);
    } catch (ParseException e) {
        error_sintactico(e,"Sintaxis en definicion de accion incorrecta");
    }
  if(encontrado) {

        s.setListaParametros(parametros);
  }
  }

  static final public ArrayList<Simbolo> parametros_formales() throws ParseException {
  ArrayList<Simbolo> parametros=new ArrayList<Simbolo>();
  ArrayList<Simbolo> parametros1=new ArrayList<Simbolo>();
  ArrayList<Simbolo> parametros2=new ArrayList<Simbolo>();
    try {
      jj_consume_token(tPA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tVAL:
      case tREF:
        parametros1 = parametros();
        for(Simbolo s:parametros1) {
                parametros.add(s);
        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case tFIN_SENTENCIA:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_5;
          }
          jj_consume_token(tFIN_SENTENCIA);
          parametros2 = parametros();
        for(Simbolo s:parametros2) {
                parametros.add(s);
        }
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(tPC);
    } catch (ParseException e) {
        error_sintactico(e,"Estructura de parametros de accion incorrecta");
    }
 {if (true) return parametros;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Simbolo > parametros() throws ParseException {
  ArrayList<Token > tokens=null;
  Tipo_variable tipo=null;
  Clase_parametro clase=null;
  Simbolo s=null;
  ArrayList<Simbolo> parametros=new ArrayList<Simbolo>();
    try {
      clase = clase_parametros();
      tipo = tipo_variables();
      tokens = identificadores();
          for(int i = 0; i < tokens.size(); i++) {
            try {
                  s=tabla_simbolos.introducir_parametro(tokens.get(i).image,tipo,clase,nivel,direccion);
                  parametros.add(s);
                  direccion = direccion+1;
                  tabla_simbolos.imprimirTabla();
                } catch(SimboloYaDeclaradoException e) {
                        boolean end=false;
                        Integer n=1;
                        token = tokens.get(i);
                        while(!end) {
                         try {
                                        s=tabla_simbolos.introducir_parametro(token.image+"_"+Integer.toString(n),tipo,clase,nivel,direccion);
                                        end=true;
                                        parametros.add(s);
                                        direccion = direccion+1;
                                        tabla_simbolos.imprimirTabla();
                                } catch(SimboloYaDeclaradoException es) {n=n+1;}
                        }
                        error_semantico(token.image, token.beginLine, token.beginColumn, e);
                  }
          }
    } catch (ParseException e) {
        error_sintactico(e,"Sintaxis de parametros incorrecta");
    }
 {if (true) return parametros;}
    throw new Error("Missing return statement in function");
  }

  static final public Clase_parametro clase_parametros() throws ParseException {
  Clase_parametro clase=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tVAL:
        jj_consume_token(tVAL);
                 clase=Clase_parametro.VAL;
        break;
      case tREF:
        jj_consume_token(tREF);
                   clase=Clase_parametro.REF;
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        error_sintactico(e,"Tipo de parametro no encontrado");
    }
 {if (true) return clase;}
    throw new Error("Missing return statement in function");
  }

  static final public void bloque_sentencias() throws ParseException {
    try {
      jj_consume_token(tPRINCIPIO);
      lista_sentencias();
      jj_consume_token(tFIN);
    } catch (ParseException e) {
        error_sintactico(e,"Sintaxis de bloque de sentencias incorrecta");
    }
  }

  static final public void lista_sentencias() throws ParseException {
    try {
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tPRINCIPIO:
        case tMQ:
        case tSI:
        case tESCRIBIR:
        case tLEER:
        case tIDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
        sentencia();
      }
    } catch (ParseException e) {
        error_sintactico(e,"Estructura de sentencias incorrecta");
    }
  }

  static final public void leer() throws ParseException {
  ArrayList<Token> iden=new ArrayList<Token>();
  Token t=null;
  Token t1=null;
  Simbolo s=null;
    try {
      t1 = jj_consume_token(tLEER);
      jj_consume_token(tPA);
      iden = identificadores();
      jj_consume_token(tPC);
                for(int n=0;n<iden.size();n++) {
                  t=iden.get(n);
                  try {
                        s=tabla_simbolos.buscar_simbolo(t.image);
                        if(!(s.ES_VARIABLE() || (s.ES_PARAMETRO() && s.ES_REFERENCIA()))) {
                                if(!(s.getVariable()==Tipo_variable.ENTERO || s.getVariable()==Tipo_variable.DESCONOCIDO
                                        || s.getVariable()==Tipo_variable.CHAR|| s.getVariable()==Tipo_variable.CADENA)) {
                                        error_semantico(t1.image, t1.beginLine, t1.beginColumn,new WrongTypeException());
                                }
                        }
                  }catch(SimboloNoEncontradoException e) {
                    error_semantico(t.image, t.beginLine, t.beginColumn, e);
                    try {
                        s=tabla_simbolos.introducir_variable(t.image,Tipo_variable.DESCONOCIDO,nivel,direccion);
                        direccion=direccion +1;
                   }catch(SimboloYaDeclaradoException es) { }

                   }
                }
    } catch (ParseException e) {
        error_sintactico(e,"Sintaxis de leer incorrecta");
    }
  }

  static final public void escribir() throws ParseException {
    try {
      jj_consume_token(tESCRIBIR);
      jj_consume_token(tPA);
      lista_escribibles();
      jj_consume_token(tPC);
    } catch (ParseException e) {
        error_sintactico(e,"Sintaxis de escribir incorrecta");
    }
  }

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////RECORDATORIO////////////////////////////////////
////////////////////////////AÑADIR !NULL PARA ELEMENTO//////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
  static final public void caraent() throws ParseException {
  Token t=null;
  Elemento el=new Elemento();
    try {
      t = jj_consume_token(tCARAENT);
      jj_consume_token(tPA);
      el = expresion();
                Integer en=null;
                if(el.getTipo()==Tipo_variable.CHAR ) {
                  if(el.getCaracter()!=null) {
                        en=(int)el.getCaracter().charValue();
                }
                }else {
                  error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                }
                el.setTipo(Tipo_variable.ENTERO);
                el.setEntero(en);
      jj_consume_token(tPC);
    } catch (ParseException e) {
        error_sintactico(e,"Sintaxis de caraent incorrecta");
    }
  }

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////RECORDATORIO////////////////////////////////////
////////////////////////////AÑADIR !NULL PARA ELEMENTO//////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
  static final public void entacar() throws ParseException {
  Elemento el=new Elemento();
  Token t=null;
    try {
      t = jj_consume_token(tENTACAR);
      jj_consume_token(tPA);
      el = expresion();
                Character c=null;
                if(el.getTipo()==Tipo_variable.ENTERO) {
                  if(el.getEntero()!=null) {
                        if(el.getEntero() <0 || el.getEntero() >255 ) {
                          error_semantico(t.image, t.beginLine, t.beginColumn, new OutOfBoundsIntExcepction());
                        }else {
                          c=(char)el.getEntero().intValue();
                        }
                        }
                }else {
                  error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                }
                el.setTipo(Tipo_variable.CHAR);
                el.setCaracter(c);
      jj_consume_token(tPC);
    } catch (ParseException e) {
        error_sintactico(e,"Sintaxis de entacar incorrecta");
    }
  }

  static final public void lista_escribibles() throws ParseException {
  Token t=null;
  Elemento el=new Elemento();
  Elemento el1=new Elemento();
  Elemento el2=new Elemento();
    try {
      el1 = expresion();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tCOMA:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_7;
        }
        t = jj_consume_token(tCOMA);
        el2 = expresion();
        if((el1.getTipo()==Tipo_variable.CHAR || el1.getTipo()==Tipo_variable.CADENA ||el1.getTipo()==Tipo_variable.ENTERO) &&
                (el2.getTipo()==Tipo_variable.CHAR || el2.getTipo()==Tipo_variable.CADENA || el2.getTipo()==Tipo_variable.ENTERO)) {

        }else {
                error_semantico(t.image, t.beginLine, t.beginColumn, new WrongTypeException());
        }
      }
    } catch (ParseException e) {
        error_sintactico(e,"Estructura de escribir incorrecta ");
    }
  }

  static final public void mientras_que() throws ParseException {
  Elemento el=null;
  Token t=null;
    try {
      t = jj_consume_token(tMQ);
      el = expresion();
                if(el.getTipo()!=Tipo_variable.DESCONOCIDO && el.getTipo()!=Tipo_variable.BOOLEANO){
                        error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                }
      lista_sentencias();
      jj_consume_token(tFMQ);
    } catch (ParseException e) {
        error_sintactico(e,"Estructura de mientras que incorrecta");
    }
  }

  static final public void si() throws ParseException {
  Elemento el=null;
  Token t=null;
    try {
      t = jj_consume_token(tSI);
      el = expresion();
                if(el.getTipo()!=Tipo_variable.DESCONOCIDO && el.getTipo()!=Tipo_variable.BOOLEANO){
                        error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                }
      jj_consume_token(tENT);
      lista_sentencias();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tSI_NO:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_8;
        }
        jj_consume_token(tSI_NO);
        lista_sentencias();
      }
      jj_consume_token(tFSI);
    } catch (ParseException e) {
        error_sintactico(e,"Estructura de si incorrecta");
    }
  }

  static final public void argumentos(Simbolo accion) throws ParseException {
    try {
      jj_consume_token(tPA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tENTACAR:
      case tCARAENT:
      case tSUMA:
      case tRESTA:
      case tNOT:
      case tTRUE:
      case tFALSE:
      case tPA:
      case tVALOR_ENTERO:
      case tVALOR_CARACTER:
      case tVALOR_CADENA:
      case tVALOR_CADENA_VACIA:
      case tIDENTIFICADOR:
        lista_expresiones(accion);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(tPC);
    } catch (ParseException e) {
        error_sintactico(e,"Estructura de lista de argumentos incorrecta");
    }
  }

  static final public void lista_expresiones(Simbolo accion) throws ParseException {
  Token t=token;
  ArrayList<Simbolo> paraList=null;
  Elemento el1=new Elemento();
  Elemento el2=new Elemento();
  Integer i=0;
  Simbolo parametro=null;
  boolean error=false;
  boolean noPara=false;
    if(accion!=null && accion.ES_ACCION() && accion.getVariable()!=Tipo_variable.DESCONOCIDO){
      paraList=accion.getListaParametros();

        }
    try {
      el1 = expresion();
                if(paraList!=null && paraList.size()>i){
                        parametro=paraList.get(i);
                        i++;
                        if(el1!=null && parametro!=null && el1.getTipo()!=Tipo_variable.DESCONOCIDO) {
                          if(parametro.ES_REFERENCIA() && el1.getPara()==null) {
                            error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongParameterException());
                            error=true;
                          }
                          if(el1.getTipo()!=parametro.getVariable()) {
                            error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongParameterException());
                            error=true;
                          }if(el1.isComplex() && parametro.ES_REFERENCIA()) {
                                error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongParameterException());
                            error=true;
                          }
                        }
                }else {
                        if(accion.getNombre()!=null) {
                                error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongActionException());
                                error=true;
                        }
                }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tCOMA:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_9;
        }
        t = jj_consume_token(tCOMA);
        el2 = expresion();
                if(paraList!=null && paraList.size()>i){
                        parametro=paraList.get(i);
                        i++;
                        if(el2!=null && parametro!=null && el2.getTipo()!=Tipo_variable.DESCONOCIDO) {

                          if(parametro.ES_REFERENCIA() && el2.getSimbolo()!=Tipo_simbolo.PARAMETRO &&
                                 el2.getSimbolo()!=Tipo_simbolo.VARIABLE) {
                            error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongParameterException());
                            error=true;
                          }
                          if(el2.getTipo()!=parametro.getVariable()) {
                            error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongParameterException());
                            error=true;
                          }if(el2.isComplex() && parametro.ES_REFERENCIA()) {
                                error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongParameterException());
                            error=true;
                          }
                        }
                }else {
                        if(accion.getNombre()!=null) {
                                error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongActionException());
                                error=true;
                        }
                }
      }
    } catch (ParseException e) {
        error_sintactico(e,"Estructura de lista de expresiones incorrecta");
    }
        if(!error && paraList!=null) {
          if(i!=paraList.size()) {
            error_semantico(accion.getNombre(), t.beginLine, t.beginColumn, new WrongActionException());
          }
        }
  }

  static final public void seleccion() throws ParseException {
    try {
      jj_consume_token(tPRINCIPIO);
      jj_consume_token(tIDENTIFICADOR);
      jj_consume_token(tLLAVE_IZQ);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tPRINCIPIO:
        case tMQ:
        case tSI:
        case tESCRIBIR:
        case tLEER:
        case tIDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_10;
        }
        sentencia();
      }
      jj_consume_token(tLLAVE_DCHA);
    } catch (ParseException e) {
        error_sintactico(e,"Sintaxis de seleccion incorrecta");
    }
  }

  static final public Elemento expresion() throws ParseException {
  op o1=null;
  op o2=null;
  Token t=token;
  Elemento el=new Elemento();
  Elemento el1=new Elemento();
  Elemento el2=new Elemento();
    try {
      el1 = expresion2();
        el.setTipo(el1.getTipo());
        el.setPara(el1.getPara());
        el.setSimbolo(el1.getSimbolo());
        el.setComplex(el1.isComplex());
        if(el1.getTipo()!=null) {
                switch(el1.getTipo()) {
                case ENTERO:
                        el.setEntero(el1.getEntero());
                        break;
                case BOOLEANO:
                        el.setBool(el1.getBool());
                        break;
                case CHAR:
                        el.setCaracter(el1.getCaracter());
                        break;
                case CADENA:
                        el.setCadena(el1.getCadena());
                }
        }
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tMAYOR:
        case tMENOR:
        case tIGUAL:
        case tMAI:
        case tMEI:
        case tNI:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_11;
        }
        o1 = operador_relacional();
        el2 = expresion2();
     if(el1.getTipo()!=Tipo_variable.DESCONOCIDO && el2.getTipo()!=Tipo_variable.DESCONOCIDO) {

        if(o1!=null) {
                el.setComplex(true);
                if(el1.getTipo()==el2.getTipo()) {

                        el.setTipo(Tipo_variable.BOOLEANO);
                        if((el1.getEntero()!=null && el2.getEntero()!=null)) {

                                        switch (o1) {
                                                case MAYOR:

                                                        el.setBool(el1.getEntero()>el2.getEntero());
                                                        break;
                                                case MENOR:
                                                        el.setBool(el1.getEntero()<el2.getEntero());
                                                        break;
                                                case IGUAL:
                                                        el.setBool(el1.getEntero()==el2.getEntero());
                                                        break;
                                                case MAI:
                                                        el.setBool(el1.getEntero()>=el2.getEntero());
                                                        break;
                                                case MEI:
                                                        el.setBool(el1.getEntero()<=el2.getEntero());
                                                        break;
                                                case NI:
                                                        el.setBool(el1.getEntero()!=el2.getEntero());
                                        }
                        }else if(el1.getBool()!=null && el2.getBool()!=null) {
                                        switch (o1) {
                                                case IGUAL:
                                                        el.setBool(el1.getBool()==el2.getBool());
                                                        break;
                                                case NI:
                                                        el.setBool(el1.getBool()!=el2.getBool());
                                                        break;
                                                default:
                                                        error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                                        }
                        }else if(el1.getCadena()!=null && el2.getCadena()!=null) {
                                        switch (o1) {
                                                case IGUAL:
                                                        el.setBool(el1.getCadena()==el2.getCadena());
                                                        break;
                                                case NI:
                                                        el.setBool(el1.getCadena()!=el2.getCadena());
                                                        break;
                                                default:
                                                        error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                                        }
                        }else if(el1.getCaracter()!=null && el2.getCaracter()!=null) {
                                        switch (o1) {
                                                case MAYOR:

                                                        el.setBool(el1.getCaracter()>el2.getCaracter());
                                                        break;
                                                case MENOR:
                                                        el.setBool(el1.getCaracter()<el2.getCaracter());
                                                        break;
                                                case IGUAL:
                                                        el.setBool(el1.getCaracter()==el2.getCaracter());
                                                        break;
                                                case MAI:
                                                        el.setBool(el1.getCaracter()>=el2.getCaracter());
                                                        break;
                                                case MEI:
                                                        el.setBool(el1.getCaracter()<=el2.getCaracter());
                                                        break;
                                                case NI:
                                                        el.setBool(el1.getCaracter()!=el2.getCaracter());
                                        }
                        }
                }else {
                                error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                }
        }else if(t!=null) {
                        if(el1.getTipo()==Tipo_variable.BOOLEANO && el2.getTipo()==Tipo_variable.BOOLEANO) {
                                el.setTipo(Tipo_variable.BOOLEANO);
                                if(el1.getBool()!=null && el2.getBool()!=null) {
                                        el.setBool(el1.getBool() || el2.getBool());
                                }
                        }else {
                                error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                        }
        }
        }else if(el1.getTipo()==Tipo_variable.DESCONOCIDO && el2.getTipo()!=Tipo_variable.DESCONOCIDO){
                el=el2;
        }else if(el1.getTipo()!=Tipo_variable.DESCONOCIDO && el2.getTipo()==Tipo_variable.DESCONOCIDO){
                el=el1;
        }else {
          el.setTipo(Tipo_variable.DESCONOCIDO);
        }
      }
    } catch (ParseException e) {
        error_sintactico(e,"Sintaxis de expresion incorrecta");
    }
         {if (true) return el;}
    throw new Error("Missing return statement in function");
  }

  static final public Elemento expresion2() throws ParseException {
  op o1=null;
  op o2=null;
  Token t=null;
  Elemento el=new Elemento();
  Elemento el1=new Elemento();
  Elemento el2=new Elemento();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tSUMA:
      case tRESTA:
        o1 = operador_aditivo();
                            el.setComplex(true);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      el1 = expresion3();
        el.setTipo(el1.getTipo());
        el.setPara(el1.getPara());
        el.setSimbolo(el1.getSimbolo());
        el.setComplex(el1.isComplex());
        if(el1.getTipo()!=null) {
                switch(el1.getTipo()) {
                        case ENTERO:
                                if(o1==op.RESTA) {
                                        el.setEntero(-el1.getEntero());
                                 }else {
                                        el.setEntero(el1.getEntero());
                                }
                                break;
                        case BOOLEANO:
                                if(o1==op.RESTA) {
                                        error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                                 }
                                el.setBool(el1.getBool());
                                break;
                        case CHAR:
                                if(o1==op.RESTA) {
                                        error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                                 }
                                el.setCaracter(el1.getCaracter());
                                break;
                        case CADENA:
                                if(o1==op.RESTA) {
                                        error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                                 }
                                el.setCadena(el1.getCadena());
                }
        }
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tSUMA:
        case tRESTA:
        case tOR:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tSUMA:
        case tRESTA:
          o2 = operador_aditivo();
          break;
        case tOR:
          t = jj_consume_token(tOR);
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        el2 = expresion3();
     if(el1.getTipo()!=Tipo_variable.DESCONOCIDO && el2.getTipo()!=Tipo_variable.DESCONOCIDO) {
        if(o2!=null) {
          t=token;
                el.setComplex(true);
                if(el1.getTipo()==Tipo_variable.ENTERO && el2.getTipo()==Tipo_variable.ENTERO) {
                        if(el1.getEntero()!=null && el2.getEntero()!=null) {
                                        el.setTipo(Tipo_variable.ENTERO);
                                        switch (o2) {
                                                case SUMA:
                                                        el.setEntero(el1.getEntero()+el2.getEntero());
                                                        break;
                                                case RESTA:
                                                        el.setEntero(el1.getEntero()-el2.getEntero());
                                        }
                        }
                }else if(t!=null){
                                error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                }
        }else if(t!=null) {
                el.setComplex(true);
                        if(el1.getTipo()==Tipo_variable.BOOLEANO && el2.getTipo()==Tipo_variable.BOOLEANO) {
                                el.setTipo(Tipo_variable.BOOLEANO);
                                if(el1.getBool()!=null && el2.getBool()!=null) {
                                        el.setBool(el1.getBool() || el2.getBool());
                                }
                        }else {
                                error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                        }
        }
        }else if(el1.getTipo()==Tipo_variable.DESCONOCIDO && el2.getTipo()!=Tipo_variable.DESCONOCIDO){
                el=el2;
        }else if(el1.getTipo()!=Tipo_variable.DESCONOCIDO && el2.getTipo()==Tipo_variable.DESCONOCIDO){
                el=el1;
        }else {
          el.setTipo(Tipo_variable.DESCONOCIDO);
        }
      }
    } catch (ParseException e) {
        error_sintactico(e,"Sintaxis de expresion incorrecta");
    }
        {if (true) return el;}
    throw new Error("Missing return statement in function");
  }

  static final public Elemento expresion3() throws ParseException {
  op o=null;
  Token t=null;
  Elemento el=new Elemento();
  Elemento el1=new Elemento();
  Elemento el2=new Elemento();
    try {
      el1 = factor();
        el.setTipo(el1.getTipo());
        el.setPara(el1.getPara());
        el.setSimbolo(el1.getSimbolo());
        if(el1.getTipo()!=null) {
                switch(el1.getTipo()) {
                        case ENTERO:
                                el.setEntero(el1.getEntero());
                                break;
                        case BOOLEANO:
                                el.setBool(el1.getBool());
                                break;
                        case CHAR:
                                el.setCaracter(el1.getCaracter());
                                break;
                        case CADENA:
                                el.setCadena(el1.getCadena());
                }
        }
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tMOD:
        case tMULL:
        case tDIV:
        case tDIV1:
        case tAND:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tMOD:
        case tMULL:
        case tDIV:
        case tDIV1:
          o = operador_multiplicativo();
          break;
        case tAND:
          t = jj_consume_token(tAND);
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        el2 = factor();
     if(el1.getTipo()!=Tipo_variable.DESCONOCIDO && el2.getTipo()!=Tipo_variable.DESCONOCIDO) {
        if(o!=null) {
          t=token;
          el.setComplex(true);

                if(el1.getTipo()==Tipo_variable.ENTERO && el2.getTipo()==Tipo_variable.ENTERO) {
                        if(el1.getEntero()!=null && el2.getEntero()!=null) {
                                        el.setTipo(Tipo_variable.ENTERO);
                                        switch (o) {
                                                case MULL:

                                                        el.setEntero(el1.getEntero()*el2.getEntero());
                                                        break;
                                                case DIV:

                                                        if(el2.getEntero()==0) {
                                                                error_semantico(t.image, t.beginLine, t.beginColumn, new DivZeroException());
                                                        }else {
                                                                el.setEntero(el1.getEntero()/el2.getEntero());
                                                        }
                                                        break;
                                                case DIV1:

                                                        if(el2.getEntero()==0) {
                                                                error_semantico(t.image, t.beginLine, t.beginColumn, new DivZeroException());
                                                        }else {
                                                                el.setEntero(el1.getEntero()/el2.getEntero());
                                                        }
                                                        break;
                                                case MOD:
                                                        if(el2.getEntero()==0) {
                                                                error_semantico(t.image, t.beginLine, t.beginColumn, new DivZeroException());
                                                        }else {
                                                        el.setEntero(el1.getEntero()%el2.getEntero());
                                                        }
                                        }
                        }
                }else if(t!=null){
                                error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                        }
        }else if(t!=null) {
                el.setComplex(true);
                        if(el1.getTipo()==Tipo_variable.BOOLEANO && el2.getTipo()==Tipo_variable.BOOLEANO) {
                                el.setTipo(Tipo_variable.BOOLEANO);
                                if(el1.getBool()!=null && el2.getBool()!=null) {
                                        el.setBool(el1.getBool() && el2.getBool());
                                }
                        }else {
                                error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                        }
        }
        }else if(el1.getTipo()==Tipo_variable.DESCONOCIDO && el2.getTipo()!=Tipo_variable.DESCONOCIDO){
                el=el2;
        }else if(el1.getTipo()!=Tipo_variable.DESCONOCIDO && el2.getTipo()==Tipo_variable.DESCONOCIDO){
                el=el1;
        }else {
          el.setTipo(Tipo_variable.DESCONOCIDO);
        }
      }
    } catch (ParseException e) {
        error_sintactico(e,"Sintaxis de expresion incorrecta");
    }
         {if (true) return el;}
    throw new Error("Missing return statement in function");
  }

  static final public op operador_relacional() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMENOR:
        jj_consume_token(tMENOR);
                         {if (true) return op.MENOR;}
        break;
      case tMAYOR:
        jj_consume_token(tMAYOR);
                     {if (true) return op.MAYOR;}
        break;
      case tMEI:
        jj_consume_token(tMEI);
                         {if (true) return op.MEI;}
        break;
      case tMAI:
        jj_consume_token(tMAI);
                         {if (true) return op.MAI;}
        break;
      case tIGUAL:
        jj_consume_token(tIGUAL);
                     {if (true) return op.IGUAL;}
        break;
      case tNI:
        jj_consume_token(tNI);
                         {if (true) return op.NI;}
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        error_sintactico(e,"Operador relacional no encontrado");
    }
    throw new Error("Missing return statement in function");
  }

  static final public op operador_aditivo() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tRESTA:
        jj_consume_token(tRESTA);
                 {if (true) return op.RESTA;}
        break;
      case tSUMA:
        jj_consume_token(tSUMA);
                         {if (true) return op.SUMA;}
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        error_sintactico(e,"Operador aditivo no encontrado");
    }
    throw new Error("Missing return statement in function");
  }

  static final public op operador_multiplicativo() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMULL:
        jj_consume_token(tMULL);
                         {if (true) return op.MULL;}
        break;
      case tDIV:
        jj_consume_token(tDIV);
                         {if (true) return op.DIV;}
        break;
      case tDIV1:
        jj_consume_token(tDIV1);
                         {if (true) return op.DIV1;}
        break;
      case tMOD:
        jj_consume_token(tMOD);
                         {if (true) return op.MOD;}
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        error_sintactico(e,"Operador multiplicativo no encontrado");
    }
    throw new Error("Missing return statement in function");
  }

  static final public Elemento factor() throws ParseException {
  Token t=null;
  Elemento el=new Elemento();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tNOT:
        t = jj_consume_token(tNOT);
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      el = factor2();
        if(t!=null ) {
                if(el.getTipo()==Tipo_variable.DESCONOCIDO || el.getTipo()==Tipo_variable.BOOLEANO) {
                        if(el.getBool()!=null) {
                                el.setBool(!el.getBool());
                        }
                }else {
                        error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                }
        }
    } catch (ParseException e) {
        error_sintactico(e,"Factor no encontrado");
    }
         {if (true) return el;}
    throw new Error("Missing return statement in function");
  }

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////RECORDATORIO////////////////////////////////////
////////////////////////////AÑADIR !NULL PARA ELEMENTO//////////////////////////////
///////////////////////////////EN CARAENT Y ENTACAR/////////////////////////////////
  static final public Elemento factor2() throws ParseException {
  Token t=null;
  Simbolo s=null;
  Elemento e=new Elemento();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tPA:
        jj_consume_token(tPA);
        e = expresion();
        jj_consume_token(tPC);
        break;
      case tENTACAR:
        t = jj_consume_token(tENTACAR);
        jj_consume_token(tPA);
        e = expresion();
                Character c=null;
                if(e.getTipo()==Tipo_variable.ENTERO ) {
                  if(e.getEntero()!=null) {
                        if(e.getEntero() <0 || e.getEntero() >255 ) {
                          error_semantico(t.image, t.beginLine, t.beginColumn, new OutOfBoundsIntExcepction());
                        }else {
                          c=(char)e.getEntero().intValue();
                        }
                        }
                }else {
                  error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                }
                e=new Elemento();
                e.setTipo(Tipo_variable.CHAR);
                e.setCaracter(c);
        jj_consume_token(tPC);
        break;
      case tCARAENT:
        t = jj_consume_token(tCARAENT);
        jj_consume_token(tPA);
        e = expresion();
                Integer en=null;
                if(e.getTipo()==Tipo_variable.CHAR ) {
                  if(e.getCaracter()!=null) {
                        en=(int)e.getCaracter().charValue();
                        }
                }else {
                  error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                }
                e=new Elemento();
                e.setTipo(Tipo_variable.ENTERO);
                e.setEntero(en);
        jj_consume_token(tPC);
        break;
      case tIDENTIFICADOR:
        t = jj_consume_token(tIDENTIFICADOR);
           try {
                s=tabla_simbolos.buscar_simbolo(t.image);
                e.setSimbolo(s.getTipo());
                if(s.ES_PARAMETRO()) {
                                e.setPara(s.getParametro());
                }if(s.ES_PROGRAMA()) {
                                        error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                }if(s.ES_ACCION()) {
                                        error_semantico(t.image, t.beginLine, t.beginColumn, new WrongExpresionException());
                }
                e.setTipo(s.getVariable());
                //Para poder realizar pruebas con el analizador semantico se han inicializado todas las variables
                //con un valor por defecto, mas adelante se le dara el valor correspondiente
                switch (e.getTipo()) {
                                case ENTERO:
                                e.setEntero(1);
                                break;
                                case BOOLEANO:
                                e.setBool(true);
                                break;
                                case CHAR:
                                e.setCaracter('A');
                                break;
                                case CADENA:
                                e.setCadena("A");
                                break;
                                default:
                }
             }catch(SimboloNoEncontradoException es) {
                        error_semantico(t.image, t.beginLine, t.beginColumn, es);
                        try {
                                s=tabla_simbolos.introducir_variable(t.image, Tipo_variable.DESCONOCIDO,nivel, direccion);
                                direccion++;
                                e.setTipo(Tipo_variable.DESCONOCIDO);

                                if(s.ES_PARAMETRO()) {
                                        e.setPara(s.getParametro());
                        }
                        }catch(SimboloYaDeclaradoException ex) {}

                }
        break;
      case tVALOR_CARACTER:
        t = jj_consume_token(tVALOR_CARACTER);
                e.setPara(Clase_parametro.VAL);
                e.setTipo(Tipo_variable.CHAR);
                e.setCaracter(t.image.charAt(1));
        break;
      case tVALOR_CADENA:
        t = jj_consume_token(tVALOR_CADENA);
                e.setPara(Clase_parametro.VAL);
                e.setTipo(Tipo_variable.CADENA);
                e.setCadena(t.image);
        break;
      case tVALOR_CADENA_VACIA:
        t = jj_consume_token(tVALOR_CADENA_VACIA);
                e.setPara(Clase_parametro.VAL);
                e.setTipo(Tipo_variable.CADENA);
                e.setCadena(t.image);
        break;
      case tVALOR_ENTERO:
        t = jj_consume_token(tVALOR_ENTERO);
                e.setPara(Clase_parametro.VAL);
                e.setTipo(Tipo_variable.ENTERO);
                e.setEntero(Integer.parseInt(t.image));
        break;
      case tTRUE:
        t = jj_consume_token(tTRUE);
                e.setPara(Clase_parametro.VAL);
                e.setTipo(Tipo_variable.BOOLEANO);
                e.setBool(true);
        break;
      case tFALSE:
        t = jj_consume_token(tFALSE);
                e.setPara(Clase_parametro.VAL);
                e.setTipo(Tipo_variable.BOOLEANO);
                e.setBool(false);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException esc) {
        error_sintactico(esc,"Sintaxis de factor incorrecta");
    }
 {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public minilengcompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000,0xca8000,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0xca8000,0x0,0x4000,0xf000000,0x0,0xca8000,0x80000000,0xc000000,0xc000000,0xc000000,0x70200000,0x70200000,0x80000000,0xc000000,0x70200000,0x0,0x3000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x4,0x40000,0xe00,0xe00,0x0,0x0,0x40000,0x0,0x3000,0x3000,0x0,0x0,0x0,0xf004c100,0x0,0x0,0x3b,0x0,0x80,0x80,0x40,0x40,0x3b,0x0,0x0,0x100,0xf004c000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x2,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x4,0x0,0x0,0x2,0x8,0x0,0x2,0x8,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,};
   }

  /** Constructor with InputStream. */
  public minilengcompiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public minilengcompiler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new minilengcompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public minilengcompiler(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new minilengcompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public minilengcompiler(minilengcompilerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(minilengcompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[68];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

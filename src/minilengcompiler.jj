/**
 * Especificacion JavaCC para la Practica 2 (Procesadores de Lenguajes)
 * Marcos Nuez - 761319@unizar.es
 * Alvaro Echavarri - 737400@unizar.es
 * v1.2 - 2021/03/16
 */
options
{
  static = true;
  ignore_case = true;
  
}

PARSER_BEGIN(minilengcompiler)

import java.io.File;
import java.io.FileInputStream;

public class minilengcompiler
{
	  public static void main(String args []) throws ParseException
	  {
	    minilengcompiler parser = new minilengcompiler(System.in);
	    if (args.length != 0 ) {
			String file = "";
			file = args[0];

			try {
				parser = new minilengcompiler(new FileInputStream(file));
			}  
			catch (Exception ex) {
				System.out.printf("No existe el fichero: "+ file + "\n");
				System.exit(1);
			}
      	}  	
   		try {  
		    minilengcompiler.programa();
		    System.out.println("Analizado correctamente");	
		}
		catch(TokenMgrError e) {  
		     // ERRORES LEXICOS
		     try {
				String simbolo = String.valueOf(minilengcompilerTokenManager.input_stream.readChar());
		        String fil = String.valueOf(minilengcompilerTokenManager.input_stream.getEndLine());
		        String col = String.valueOf(minilengcompilerTokenManager.input_stream.getEndColumn());
		     
		        System.err.println("ERROR LÉXICO (<" + fil + ", " + col + ">): símbolo no reconocido: <" + simbolo + ">");
		        return;
		     }  
		     catch (Exception ex) { }
		}
		catch (Exception e) {
			System.out.println("NOK.");
		    System.out.println(e.getMessage());
		    minilengcompiler.ReInit(System.in);
		}
		catch (Error e) { 
		    System.out.println("Oops.");
		    System.out.println(e.getMessage());
		}    
 	 }
}

PARSER_END(minilengcompiler)

< DEFAULT >SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "%" : COMLINE
| "%%" : COMBLOCK
}

< COMLINE >SKIP :
{
  "%" : DEFAULT
}

< COMBLOCK >SKIP :
{
  "%%" : DEFAULT
}


< COMLINE >MORE :
{
  <(~["\n"])*"\n">
  {
   System.out.println("COMENTARIO");
   }
}

< COMBLOCK >MORE :
{
  <(("%")?~["%"])*"%%">
  {
   System.out.println("COMENTARIO DOBLE");
   }
}


TOKEN : /* CONTROLES DE FLUJO */
{
  < tPROGRAMA : "programa" >
  {
    System.out.println("PROGRAMA");
  }
| < tACCION : "accion" >
  {
    System.out.println("ACCION");
  }
| < tENT : "ent" >
  {
    System.out.println("ENT");
  }
| < tSI_NO : "si_no" >
  {
    System.out.println("SI_NO");
  }
| < tPRINCIPIO : "principio" >
  {
    System.out.println("PRINCIPIO");
  }  
| < tFIN : "fin" >
  {
    System.out.println("FIN");
  }
| < tMQ : "mq" >
  {
    System.out.println("MQ");
  }
| < tFMQ : "fmq" >
  {
    System.out.println("FMQ");
  }
| < tSI : "si" >
  {
    System.out.println("SI");
  }
| < tFSI : "fsi" >
  {
    System.out.println("FSI");
  }
}

TOKEN : /* FUNCIONES */
{
  < tMOD : "mod" >
  {
    System.out.println("MOD");
  }
| < tESCRIBIR : "escribir" >
  {
    System.out.println("ESCRIBIR");
  }
| < tLEER : "leer" >
  {
    System.out.println("LEER");
  }  
| < tENTACAR : "entacar" >
  {
    System.out.println("ENTACAR");
  }
| < tCARAENT : "caraent" >
  {
    System.out.println("CARAENT");
  }  
}
  
TOKEN : /* OPERADORES */
{
  < tSUMA : "+" >
  {
    System.out.println("SUMA");
  }
| < tRESTA : "-" >
  {
    System.out.println("RESTA");
  }
| < tMULL : "*" >
  {
    System.out.println("MULL");
  }
| < tDIV : "/" >
  {
    System.out.println("DIV");
  }
| < tDIV1 : "div" >
  {
    System.out.println("DIV1");
  }        
| < tMAYOR : ">" >
  {
    System.out.println("MAYOR");
  }
| < tMENOR : "<" >
  {
    System.out.println("MENOR");
  }
| < tIGUAL : "==" >
  {
    System.out.println("IGUAL");
  }
| < tOAS : ":=" >
  {
    System.out.println("OAS");
  }
| < tMAI : ">=" >
  {
    System.out.println("MAI");
  }
| < tMEI : "<=" >
  {
    System.out.println("MEI");
  }
| < tNI : "<>" >
  {
    System.out.println("NI");
  }
| < tAND : "and" >
  {
    System.out.println("AND");
  }              
| < tOR : "or" >
  {
    System.out.println("OR");
  }
| < tNOT : "not" >
  {
    System.out.println("NOT");
  }                                   
}

TOKEN : /* TIPOS DE DATOS */
{
  < tENTERO : "entero" >
  {
    System.out.println("ENTERO");
  }
| < tBOOLEANO : "booleano" >
  {
    System.out.println("BOOLEANO");
  }
| < tCARACTER : "caracter" >
  {
    System.out.println("CARACTER");
  }
| < tVAL : "val" >
  {
    System.out.println("VALOR");
  }
| < tREF : "ref" >
  {
    System.out.println("REFERENCIA");
  }
| < tTRUE : "true" >
  {
    System.out.println("TRUE");
  }
| < tFALSE : "false" >
  {
    System.out.println("FALSE");
  }      
}

TOKEN : /* AGRUPACIONES */
{
  <  tLLAVE_IZQ : "{" >
  {
    System.out.println("LLAVE_IZQ");
  }
| <  tLLAVE_DCHA : "}" >
  {
    System.out.println("LLAVE_DCHA");
  }
| <  tPA : "(" >
  {
    System.out.println("PA");
  }
| <  tPC : ")" >
  {
    System.out.println("PC");
  }   
}

TOKEN : /* VALORES */
{
  < #DIGITO : ["0"-"9"] >
| < #LETRA : ["a"-"z","_","0"-"9"] >
| < #BOOLEAN : "true" | "false" >
| < #LETRAID_INICIAL : ["a"-"z","_"] >
| < #LETRAID_FINAL : ["a"-"z","0"-"9"] >
| < #CARACTER : "\""~["\""] "\"" >
| < #CADENA : "\""(~["\""])+ "\"" >

| < tVALOR_ENTERO : ("-")?(< DIGITO >)+ >
  {
    System.out.println("VALOR_ENTERO (Valor: " + matchedToken + ")");
  }
| < tVALOR_CARACTER : ("-")?(< CARACTER >) >
  {
    System.out.println("VALOR_CARACTER (Valor: " + matchedToken + ")");
  }
| < tVALOR_CADENA : ("-")?(< CADENA >) >
  {
    System.out.println("VALOR_CADENA (Valor: " + matchedToken + ")");
  }  
| < tVALOR_BOOLEANO : ("-")?(< BOOLEAN >) >
  {
    System.out.println("VALOR_BOOLEANO (Valor: " + matchedToken + ")");
  }
| <  tIDENTIFICADOR_ASIG : ((< LETRAID_INICIAL >)(< LETRA >)+(< LETRAID_FINAL >) | (< LETRAID_INICIAL >) | (< LETRAID_INICIAL >)(< LETRAID_FINAL >))(" ")*< tOAS > >
  {
    System.out.println("IDENTIFICADOR_ASIG (Valor: " + matchedToken + ")");
  } 
| <  tIDENTIFICADOR : (< LETRAID_INICIAL >)(< LETRA >)+(< LETRAID_FINAL >) | (< LETRAID_INICIAL >) | (< LETRAID_INICIAL >)(< LETRAID_FINAL >) >
  {
    System.out.println("IDENTIFICADOR (Valor: " + matchedToken + ")");
  }

}


TOKEN : /* FINES DE SENTENCIA */
{
  <  tFIN_SENTENCIA : ";" >
  {
    System.out.println("FIN_SENTENCIA");
  }
| <  tCOMA : "," >
  {
    System.out.println("COMA");
  }
}


void programa():
{
}
{
  < tPROGRAMA > < tIDENTIFICADOR > < tFIN_SENTENCIA > (declaracion_variables()) (declaracion_acciones())
  (bloque_sentencias())*
}

void sentencia():
{
}
{
  	(leer()) < tFIN_SENTENCIA >
 |  (escribir()) < tFIN_SENTENCIA >
 |  (asignacion()) < tFIN_SENTENCIA >
 |	(invocacion_accion()) < tFIN_SENTENCIA >
 |	(seleccion()) 
 |	(mientras_que())
}

void asignacion():
{
}
{
  < tIDENTIFICADOR_ASIG > expresion() 
}

void invocacion_accion():
{
}
{
  <tIDENTIFICADOR> argumentos() 
}

void declaracion_variables():
{
}
{
  	( declaracion() ";" )*
}

void declaracion():
{
}
{
  	tipo_variables() identificadores()
}

void tipo_variables():
{
}
{
  	< tENTERO > | < tCARACTER > | < tBOOLEANO >
}

void identificadores():
{
}
{
  	< tIDENTIFICADOR > ( "," < tIDENTIFICADOR > )*
}

void declaracion_acciones():
{
}
{
  	( declaracion_accion() )*
}

void declaracion_accion():
{
}
{
  	cabecera_accion() declaracion_variables() declaracion_acciones() bloque_sentencias()
}

void cabecera_accion():
{
}
{
  	< tACCION > < tIDENTIFICADOR > (< tFIN_SENTENCIA >|parametros_formales() < tFIN_SENTENCIA >)
}

void parametros_formales():
{
}
{
  < tPA >parametros() (< tFIN_SENTENCIA > parametros())*< tPC >
}

void parametros():
{
}
{
  	clase_parametros() tipo_variables() identificadores()
}

void clase_parametros():
{
}
{
  	< tVAL > | < tREF >
}

void bloque_sentencias():
{
}
{
  	< tPRINCIPIO > lista_sentencias() < tFIN >
}

void lista_sentencias():
{
}
{
  	(sentencia())*
}

void leer():
{
}
{
  	< tLEER > < tPA > identificadores() < tPC >
}

void escribir():
{
}
{
  	< tESCRIBIR > < tPA > identificadores() < tPC >
}

void mientras_que():
{
}
{
  	< tMQ > expresion() lista_sentencias() < tFMQ >
}

void argumentos():
{
}
{
  	< tPA > ( lista_expresiones() )? < tPC >
}

void lista_expresiones():
{
}
{
  	expresion()(","expresion())*
}

void seleccion():
{
}
{
  	< tPRINCIPIO > < tIDENTIFICADOR > < tLLAVE_IZQ > (sentencia())* < tLLAVE_DCHA >
}

void expresion():
{
}
{
   operador_relacional()(expresion())*
 | operador_aditivo()(expresion())*
 | termino()(expresion())*
 | "-"termino()(expresion())*
 | operador_multiplicativo()(expresion())*
 
}
void operador_relacional():
{
}
{
	 factor()< tMENOR >factor()
	| factor()< tMAYOR >factor()
	| factor()< tMEI >factor()
	| factor()< tMAI >factor()
	| factor()< tIGUAL >factor()
	| factor()< tMENOR >factor()operador()
	| factor()< tMAYOR >factor()operador()
	| factor()< tMEI >factor()operador()
	| factor()< tMAI >factor()operador()
	| factor()< tIGUAL >factor()operador()
}

void operador_aditivo():
{
}
{
  factor()< tRESTA >factor()
	| factor()< tSUMA >factor()
	| factor()< tRESTA >factor()operador()
	| factor()< tSUMA >factor()operador()
	 
}
void termino():
{
}
{
  	factor()
	| < tPA >factor()< tPC >
	| factor()operador()
	| < tPA >factor()< tPC >operador()
}

void operador_multiplicativo():
{
}
{
  factor()< tMULL >factor()
	| factor()< tDIV >factor()
	| factor()< tMULL >factor()operador()
	| factor()< tDIV >factor()operador()
}

void operador():
{
}
{
  < tSUMA >
| < tRESTA >
| < tMAYOR >
| < tMENOR >
| < tMAI >
| < tMEI >
| < tMULL >
| < tDIV >
| < tDIV1 >
| < tMOD >
}
void factor():
{
}
{
  < tRESTA > factor()
| < tNOT > factor()
| < tPA > expresion() < tPC >
| < tENTACAR > < tPA > expresion() < tPC >
| < tCARAENT > < tPA > expresion() < tPC >
| < tIDENTIFICADOR >
| < tENTERO >
| < tCARACTER >
| < tVALOR_CADENA >
| < tTRUE >
| < tFALSE >
}

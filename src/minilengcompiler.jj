/**
 * Especificacion JavaCC para la Practica 2 (Procesadores de Lenguajes)
 * Marcos Nuez - 761319@unizar.es
 * Alvaro Echavarri - 737400@unizar.es
 * v1.2 - 2021/03/16
 */
options
{
  static = true;
  ignore_case = true;
}

PARSER_BEGIN(CompiladorClases)

public class CompiladorClases
{
  public static void main(String args []) throws ParseException
  {
    CompiladorClases parser = new CompiladorClases(System.in);
    System.out.println("Leyendo de la entrada estandar...");
    try { 
    	CompiladorClases.programa();
    	System.out.println("Analizado correctamente");
    	
    }
    catch(TokenMgrError e) {
     
     // ERRORES LEXICOS
     programa_correcto = 0;
     String simbolo = String.valueOf(minilengcompilerTokenManager.input_stream.readChar());
     String fil = String.valueOf(minilengcompilerTokenManager.input_stream.getEndLine());
     String col = String.valueOf(minilengcompilerTokenManager.input_stream.getEndColumn());
     
     System.err.println("ERROR LÉXICO (<" + fil + ", " + col + ">): símbolo no reconocido: <" + simbolo + ">");
     return;
    }
    catch (Exception e) {
		System.out.println("NOK.");
        System.out.println(e.getMessage());
        CompiladorClases.ReInit(System.in);
	}
    catch (Error e) { 
        System.out.println("Oops.");
        System.out.println(e.getMessage());
	} 
  }
}

PARSER_END(minilengcompiler)

< DEFAULT >SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "%" : COMLINE
| "%%" : COMBLOCK
}

< COMLINE >SKIP :
{
  "%" : DEFAULT
}

< COMBLOCK >SKIP :
{
  "%%" : DEFAULT
}

< COMBLOCK,COMLINE >MORE :
{
  <~[]>
}

 
TOKEN : /* PALABRAS RESERVADAS */
{
  < tPROGRAMA : "programa" >
  {
    System.out.println("PROGRAMA");
  }
| < tACCION : "accion" >
  {
    System.out.println("ACCION");
  }
| < tPRINCIPIO : "principio" >
  {
    System.out.println("PRINCIPIO");
  }  
| < tFIN : "fin" >
  {
    System.out.println("FIN");
  }
| < tMQ : "mq" >
  {
    System.out.println("MQ");
  }
| < tFMQ : "fmq" >
  {
    System.out.println("FMQ");
  }
| < tSI : "si" >
  {
    System.out.println("SI");
  }
| < tFSI : "fsi" >
  {
    System.out.println("FSI");
  }
| < tESCRIBIR : "escribir" >
  {
    System.out.println("ESCRIBIR");
  }
| < tLEER : "leer" >
  {
    System.out.println("LEER");
  }  
| < tENTACAR : "entacar" >
  {
    System.out.println("ENTACAR");
  }
| < tCARAENT : "caraent" >
  {
    System.out.println("CARAENT");
  }
| < tAND : "and" >
  {
    System.out.println("AND");
  }              
| < tOR : "or" >
  {
    System.out.println("OR");
  }
| < tNOT : "not" >
  {
    System.out.println("NOT");
  }
| < tENT : "ent" >
  {
    System.out.println("ENT");
  }
| < tSI_NO : "si_no" >
  {
    System.out.println("SI_NO");
  }
| < tMOD : "mod" >
  {
    System.out.println("MOD");
  }
| < tTRUE : "true" >
  {
    System.out.println("TRUE");
  }
| < tFALSE : "false" >
  {
    System.out.println("FALSE");
  }
| < tMAYOR : ">" >
  {
    System.out.println("MAYOR");
  }
| < tMENOR : "<" >
  {
    System.out.println("MENOR");
  }
| < tIGUAL : "==" >
  {
    System.out.println("IGUAL");
  }
| < tMAI : ">=" >
  {
    System.out.println("MAI");
  }
| < tMEI : "<=" >
  {
    System.out.println("MEI");
  }
| < tNI : "<>" >
  {
    System.out.println("NI");
  }
| < tOPAS : ":=" >
  {
    System.out.println("OPAS");
  }                                 
}

TOKEN : /* TIPOS DE DATOS */
{
  < tENTERO : "entero" >
  {
    System.out.println("ENTERO");
  }
| < tBOOLEANO : "booleano" >
  {
    System.out.println("BOOLEANO");
  }
| < tCARACTER : "caracter" >
  {
    System.out.println("CARACTER");
  }
| < tVAL : "val" >
  {
    System.out.println("VALOR");
  }
| < tREF : "ref" >
  {
    System.out.println("REFERENCIA");
  }    
}

TOKEN : /* AGRUPACIONES */
{
  <  tLLAVE_IZQ : "{" >
  {
    System.out.println("LLAVE_IZQ");
  }
| <  tLLAVE_DCHA : "}" >
  {
    System.out.println("LLAVE_DCHA");
  }
}

TOKEN : /* VALORES */
{
  < #DIGITO : ["0"-"9"] >
| < #LETRA : ["a"-"z","_","0"-"9"] >
| < #BOOLEAN : "true" | "false" >
| < #LETRAID_INICIAL : ["a"-"z","_"] >
| < #LETRAID_FINAL : ["a"-"z","0"-"9"] >

| < tVALOR_ENTERO : ("-")?(< DIGITO >)+ >
  {
    System.out.println("VALOR_ENTERO (Valor: " + matchedToken + ")");
  }
| < tVALOR_CARACTER : ("-")?(< LETRA >) >
  {
    System.out.println("VALOR_CARACTER (Valor: " + matchedToken + ")");
  }
| < tVALOR_BOOLEANO : ("-")?(< BOOLEAN >) >
  {
    System.out.println("VALOR_BOOLEANO (Valor: " + matchedToken + ")");
  }  
| <  tIDENTIFICADOR : (< LETRAID_INICIAL >)(< LETRA >)+(< LETRAID_FINAL >) >
  {
    System.out.println("IDENTIFICADOR (Valor: " + matchedToken + ")");
  }  
}


TOKEN : /* OPERADORES */
{
  <  tFIN_SENTENCIA : ";" >
  {
    System.out.println("FIN_SENTENCIA");
  }
| <  tCOMA : "," >
  {
    System.out.println("COMA");
  }
}


void programa():
{
}
{
  < tPROGRAMA > < tIDENTIFICADOR > < tFIN_SENTENCIA > (declaracion_variables()) (declaracion_acciones())
  (bloque_sentencias())
}

void sentencia():
{
}
{
  	(leer()) < tFIN_SENTENCIA >
 |  (escribir()) < tFIN_SENTENCIA >
 |  (asignacion()) 
 |	(invocacion_accion())
 |	(seleccion()) 
 |	(mientras_que())
}

void declaracion_variables():
{
  
}
{
  	( declaracion() ";" )*
}

void declaracion():
{
}
{
  	tipo_variables() identificadores()
}

void tipo_variables():
{
}
{
  	<tENTERO> | <tCARACTER> | <tBOOLEANO>
}

void identificadores():
{
}
{
  	<tIDENTIFICADOR> ( "," <tIDENTIFICADOR> )*
}

void declaracion_acciones():
{
}
{
  	( declaracion_accion() )*
}

void declaracion_accion():
{
}
{
  	cabecera_accion() ";" declaracion_variables() declaracion_acciones() bloque_sentencias()
}

void cabecera_accion():
{
}
{
  	<tACCION> <tIDENTIFICADOR> "("parametros_formales()")" < tFIN_SENTENCIA >
}

void parametros_formales():
{
}
{
   parametros()
 | parametros()< tFIN_SENTENCIA >(parametros_formales())*
}

void parametros():
{
}
{
  	clase_parametros() tipo_variables() identificadores()
}

void clase_parametros():
{
}
{
  	<tVAL> | <tREF>
}

void bloque_sentencias():
{
}
{
  	<tPRINCIPIO> lista_sentencias() <tFIN>
}

void lista_sentencias():
{
}
{
  	(sentencia())*
}

void leer():
{
}
{
  	<tLEER> "(" identificadores() ")"
}

void escribir():
{
}
{
  	<tESCRIBIR> "(" identificadores() ")"
}

void asignacion():
{
}
{
  	<tIDENTIFICADOR> <tOPAS> expresion() ";"
}

void invocacion_accion():
{
}
{
  	<tIDENTIFICADOR> argumentos() ";"
}


void mientras_que():
{
}
{
  	<tMQ> expresion() lista_sentencias() <tFMQ>
}

void argumentos():
{
}
{
  	"(" ( lista_expresiones() )? ")"
}

void lista_expresiones():
{
}
{
  	expresion()(","expresion())*
}

void seleccion():
{
}
{
  	< tPRINCIPIO > < tIDENTIFICADOR > "{" (sentencia())* "}"
}

void expresion():
{
}
{
   operador_relacional()(expresion())*
 | operador_aditivo()(expresion())*
 | termino()(expresion())*
 | "-"termino()(expresion())*
 | operador_multiplicativo()(expresion())*
 
}
void operador_relacional():
{
}
{
<<<<<<< Updated upstream
	 factor()"<"factor()
	| factor()">"factor()
	| factor()"<="factor()
	| factor()">="factor()
	| factor()"=="factor()
	| factor()"<"factor()operador()
	| factor()">"factor()operador()
	| factor()"<="factor()operador()
	| factor()">="factor()operador()
	| factor()"=="factor()operador()
=======
  	"-"
	| "+"
	| "*"
	| "/"
	| ":"
	| "<"
	| ">"
	| "<="
	| ">="
>>>>>>> Stashed changes
}

void operador_aditivo():
{
}
{
  factor()"-"factor()
	| factor()"+"factor()
	| factor()"-"factor()operador()
	| factor()"+"factor()operador()
	 
}
void termino():
{
}
{
  	factor()
	| "("factor()")"
	| factor()operador()
	| "("factor()")"operador()
}

void operador_multiplicativo():
{
}
{
  factor()"*"factor()
	| factor()":"factor()
	| factor()"*"factor()operador()
	| factor()":"factor()operador()
}

void operador():
{
}
{
	"+"
| "-"
| "<"
| ">"
| "<"
| ">="
| "<="
| "*"
| "/"
| ":"
}
void factor():
{
}
{
  	"-" factor()
| <tNOT> factor()
| "(" expresion() ")"
| <tENTACAR> "(" expresion() ")"
| <tCARAENT> "(" expresion() ")"
| <tIDENTIFICADOR>
| <tCONSTENTERA>
| <tCONSTCHAR>
| <tCONSTCAD>
| <tTRUE>
| <tFALSE>
}
